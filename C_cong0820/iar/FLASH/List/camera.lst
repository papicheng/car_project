###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Feb/2018  18:55:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\app\camera.c
#    Command line =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\app\camera.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\FLASH\List
#        -lB
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\FLASH\List
#        -o
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR Systems\Embedded
#        Workbench 7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\app\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\CPU\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\LPLD\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\FatFs\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\USB\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\FLASH\List\camera.lst
#    Object file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\iar\FLASH\Obj\camera.o
#
###############################################################################

G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\C_cong0820\app\camera.c
      1          
      2          #include "camera.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable6_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
      3          #include "common.h"
      4          
      5          #define COLUMN 180       //列
      6          #define ROW    120      //行
      7          #define ROWbegin    30      //开始采集行
      8          #define ROWend    120      //结束采集行
      9          #define ROWnum    90      //采集行数
     10          

   \                                 In section .bss, align 4
     11          unsigned char Image1[ROW][COLUMN];
   \                     Image1:
   \   00000000                      DS8 21600

   \                                 In section .bss, align 4
     12          unsigned char Image2[ROW][COLUMN];
   \                     Image2:
   \   00000000                      DS8 21600

   \                                 In section .bss, align 1
     13          uint8  end_flag=0; 
   \                     end_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     14          uint8 start_flag=0;
   \                     start_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15          uint8 row=0;
   \                     row:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     16          uint8 lock=0;
   \                     lock:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     17          uint8 WhichBuffer = 1;
   \                     WhichBuffer:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     18          uint8 setvalue=110;//阈值
   \                     setvalue:
   \   00000000   0x6E               DC8 110

   \                                 In section .bss, align 1
     19          uint8 real_pointx,real_pointy,NOpoint,rowAdr;
   \                     real_pointx:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     real_pointy:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     NOpoint:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     rowAdr:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     20          float sumtuan,testsum[5],testsum_average;
   \                     sumtuan:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     testsum:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     testsum_average:
   \   00000000                      DS8 4
     21          //int prok;
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void camera_init(void)
     24          {
   \                     camera_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     25            static GPIO_InitTypeDef dmaReq_port_struct;
     26            dmaReq_port_struct.GPIO_PTx = PTE;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x400ff100
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     27            dmaReq_port_struct.GPIO_Pins = GPIO_Pin11;
   \   0000000E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   00000016   0x6048             STR      R0,[R1, #+4]
     28            dmaReq_port_struct.GPIO_Dir = DIR_INPUT;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000001E   0x7308             STRB     R0,[R1, #+12]
     29            dmaReq_port_struct.GPIO_PinControl =IRQC_DMAFA | INPUT_PULL_UP;//下降沿产生DMA请求,输入上拉
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x20003
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   00000028   0x6088             STR      R0,[R1, #+8]
     30            LPLD_GPIO_Init(dmaReq_port_struct);
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000002E   0xB084             SUB      SP,SP,#+16
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x2214             MOVS     R2,#+20
   \   00000034   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000038   0xBC0F             POP      {R0-R3}
   \   0000003A   0x.... 0x....      BL       LPLD_GPIO_Init
     31            
     32            static GPIO_InitTypeDef href_port_struct;  //行中断接受端口
     33            href_port_struct.GPIO_PTx = PTE;    
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x400ff100
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000046   0x6008             STR      R0,[R1, #+0]
     34            href_port_struct.GPIO_Pins = GPIO_Pin10;   
   \   00000048   0xF44F 0x6080      MOV      R0,#+1024
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000050   0x6048             STR      R0,[R1, #+4]
     35            href_port_struct.GPIO_Dir = DIR_INPUT;        //输入
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000058   0x7308             STRB     R0,[R1, #+12]
     36            href_port_struct.GPIO_PinControl = IRQC_RI|INPUT_PULL_UP|INPUT_PF_EN;  //内部上拉|下降沿中断
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x90013
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000062   0x6088             STR      R0,[R1, #+8]
     37            href_port_struct.GPIO_Isr = porte_isr;        //中断函数
   \   00000064   0x.... 0x....      ADR.W    R0,porte_isr
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   0000006C   0x6108             STR      R0,[R1, #+16]
     38            LPLD_GPIO_Init(href_port_struct);
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000072   0xB084             SUB      SP,SP,#+16
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007C   0xBC0F             POP      {R0-R3}
   \   0000007E   0x.... 0x....      BL       LPLD_GPIO_Init
     39            LPLD_GPIO_EnableIrq(href_port_struct);
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000086   0xB084             SUB      SP,SP,#+16
   \   00000088   0x4668             MOV      R0,SP
   \   0000008A   0x2214             MOVS     R2,#+20
   \   0000008C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000090   0xBC0F             POP      {R0-R3}
   \   00000092   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     40            
     41            static GPIO_InitTypeDef vsync_port_struct;  //场中断接受端口
     42            vsync_port_struct.GPIO_PTx = PTE;    
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x400ff100
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   0000009E   0x6008             STR      R0,[R1, #+0]
     43            vsync_port_struct.GPIO_Pins = GPIO_Pin12;   
   \   000000A0   0xF44F 0x5080      MOV      R0,#+4096
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   000000A8   0x6048             STR      R0,[R1, #+4]
     44            vsync_port_struct.GPIO_Dir = DIR_INPUT;        //输入
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   000000B0   0x7308             STRB     R0,[R1, #+12]
     45            vsync_port_struct.GPIO_PinControl = IRQC_RI|INPUT_PULL_UP|INPUT_PF_EN;    //内部上拉|下降沿中断
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x90013
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   000000BA   0x6088             STR      R0,[R1, #+8]
     46            vsync_port_struct.GPIO_Isr = porte_isr;        //中断函数
   \   000000BC   0x.... 0x....      ADR.W    R0,porte_isr
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   000000C4   0x6108             STR      R0,[R1, #+16]
     47            LPLD_GPIO_Init(vsync_port_struct);
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   000000CA   0xB084             SUB      SP,SP,#+16
   \   000000CC   0x4668             MOV      R0,SP
   \   000000CE   0x2214             MOVS     R2,#+20
   \   000000D0   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000D4   0xBC0F             POP      {R0-R3}
   \   000000D6   0x.... 0x....      BL       LPLD_GPIO_Init
     48            LPLD_GPIO_EnableIrq(vsync_port_struct);
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   000000DE   0xB084             SUB      SP,SP,#+16
   \   000000E0   0x4668             MOV      R0,SP
   \   000000E2   0x2214             MOVS     R2,#+20
   \   000000E4   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000E8   0xBC0F             POP      {R0-R3}
   \   000000EA   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     49            
     50            //摄像头到单片机数据口初始化：PTE0~PTE7
     51            static GPIO_InitTypeDef data_port_struct;
     52            data_port_struct.GPIO_PTx = PTE;
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x400ff100
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   000000F6   0x6008             STR      R0,[R1, #+0]
     53            data_port_struct.GPIO_Dir = DIR_INPUT;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   000000FE   0x7308             STRB     R0,[R1, #+12]
     54            data_port_struct.GPIO_Pins = GPIO_Pin0_7;
   \   00000100   0x20FF             MOVS     R0,#+255
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000106   0x6048             STR      R0,[R1, #+4]
     55            data_port_struct.GPIO_PinControl = IRQC_DIS|INPUT_PULL_DIS;
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   0000010E   0x6088             STR      R0,[R1, #+8]
     56            LPLD_GPIO_Init(data_port_struct);
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable6_8
   \   00000114   0xB084             SUB      SP,SP,#+16
   \   00000116   0x4668             MOV      R0,SP
   \   00000118   0x2214             MOVS     R2,#+20
   \   0000011A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000011E   0xBC0F             POP      {R0-R3}
   \   00000120   0x.... 0x....      BL       LPLD_GPIO_Init
     57            
     58            //DMA参数配置
     59            static DMA_InitTypeDef  dma_init_struct;
     60            dma_init_struct.DMA_CHx = DMA_CH0;    //CH0通道
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   0000012A   0x7008             STRB     R0,[R1, #+0]
     61            dma_init_struct.DMA_Req = PORTE_DMAREQ;     //PORTB22为请求源
   \   0000012C   0x2035             MOVS     R0,#+53
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   00000132   0x7048             STRB     R0,[R1, #+1]
     62            dma_init_struct.DMA_MajorLoopCnt = COLUMN;   //主循环计数值：行采集点数，宽度
   \   00000134   0x20B4             MOVS     R0,#+180
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   0000013A   0x8088             STRH     R0,[R1, #+4]
     63            dma_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次传输1字节
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   00000142   0x6088             STR      R0,[R1, #+8]
     64            dma_init_struct.DMA_SourceAddr = (uint32)&PTE->PDIR; //源地址：PTC0-PTC7,Port Data Input Register
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable6_10  ;; 0x400ff110
   \   00000148   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   0000014C   0x60C8             STR      R0,[R1, #+12]
     65            dma_init_struct.DMA_DestAddr = (uint32)Image1;      //目的地址：存放图像的数组
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable6_11
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   00000156   0x6188             STR      R0,[R1, #+24]
     66            dma_init_struct.DMA_DestAddrOffset = 1;       //目的地址偏移：每次读入增加1
   \   00000158   0x2001             MOVS     R0,#+1
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   0000015E   0x83C8             STRH     R0,[R1, #+30]
     67            dma_init_struct.DMA_AutoDisableReq = TRUE;    //自动禁用请求，使能后通道请求将在主循环结束后禁用
   \   00000160   0x2001             MOVS     R0,#+1
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   00000166   0xF881 0x0024      STRB     R0,[R1, #+36]
     68            LPLD_DMA_Init(dma_init_struct);//初始化但未使能
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable6_9
   \   0000016E   0xB084             SUB      SP,SP,#+16
   \   00000170   0x4668             MOV      R0,SP
   \   00000172   0x222C             MOVS     R2,#+44
   \   00000174   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000178   0xBC0F             POP      {R0-R3}
   \   0000017A   0x.... 0x....      BL       LPLD_DMA_Init
     69            
     70            static UART_InitTypeDef uart4_init_struct;
     71            uart4_init_struct.UART_Uartx = UART4; //UART4 用于与电脑通信           
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable6_12  ;; 0x400ea000
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   00000186   0x6008             STR      R0,[R1, #+0]
     72            uart4_init_struct.UART_BaudRate = 115200;
   \   00000188   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   00000190   0x6048             STR      R0,[R1, #+4]
     73            uart4_init_struct.UART_TxPin = PTE24;//发送引脚为PTE24
   \   00000192   0x2094             MOVS     R0,#+148
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   00000198   0x7208             STRB     R0,[R1, #+8]
     74            uart4_init_struct.UART_RxPin = PTE25;//接收引脚为PTE25
   \   0000019A   0x2095             MOVS     R0,#+149
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   000001A0   0x7248             STRB     R0,[R1, #+9]
     75            uart4_init_struct.UART_RxIntEnable=TRUE;//使能接受中断
   \   000001A2   0x2001             MOVS     R0,#+1
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   000001A8   0x7288             STRB     R0,[R1, #+10]
     76            LPLD_UART_EnableIrq(uart4_init_struct);//中断使能
   \   000001AA   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   000001AE   0xB084             SUB      SP,SP,#+16
   \   000001B0   0x4668             MOV      R0,SP
   \   000001B2   0x221C             MOVS     R2,#+28
   \   000001B4   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001B8   0xBC0F             POP      {R0-R3}
   \   000001BA   0x.... 0x....      BL       LPLD_UART_EnableIrq
     77            LPLD_UART_Init(uart4_init_struct); //初始化UART
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable6_13
   \   000001C2   0xB084             SUB      SP,SP,#+16
   \   000001C4   0x4668             MOV      R0,SP
   \   000001C6   0x221C             MOVS     R2,#+28
   \   000001C8   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001CC   0xBC0F             POP      {R0-R3}
   \   000001CE   0x.... 0x....      BL       LPLD_UART_Init
     78            
     79            static UART_InitTypeDef uart0_init_struct;
     80            uart0_init_struct.UART_Uartx = UART0; //UART0用于设置摄像头
   \   000001D2   0x.... 0x....      LDR.W    R0,??DataTable6_14  ;; 0x4006a000
   \   000001D6   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \   000001DA   0x6008             STR      R0,[R1, #+0]
     81            uart0_init_struct.UART_BaudRate = 115200; 
   \   000001DC   0xF45F 0x30E1      MOVS     R0,#+115200
   \   000001E0   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \   000001E4   0x6048             STR      R0,[R1, #+4]
     82            uart0_init_struct.UART_RxPin = PTB16;  //接收引脚为PTB16
   \   000001E6   0x2030             MOVS     R0,#+48
   \   000001E8   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \   000001EC   0x7248             STRB     R0,[R1, #+9]
     83            uart0_init_struct.UART_TxPin = PTB17;  //发送引脚为PTB17
   \   000001EE   0x2031             MOVS     R0,#+49
   \   000001F0   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \   000001F4   0x7208             STRB     R0,[R1, #+8]
     84            LPLD_UART_Init(uart0_init_struct); //初始化UART
   \   000001F6   0x.... 0x....      LDR.W    R1,??DataTable6_15
   \   000001FA   0xB084             SUB      SP,SP,#+16
   \   000001FC   0x4668             MOV      R0,SP
   \   000001FE   0x221C             MOVS     R2,#+28
   \   00000200   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000204   0xBC0F             POP      {R0-R3}
   \   00000206   0x.... 0x....      BL       LPLD_UART_Init
     85            
     86            MT9V032_CFG_init();//MT9V032设置
   \   0000020A   0x.... 0x....      BL       MT9V032_CFG_init
     87          }
   \   0000020E   0xB007             ADD      SP,SP,#+28
   \   00000210   0xBD00             POP      {PC}             ;; return

   \                                 In section .bss, align 4
   \                     ??dmaReq_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??href_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??vsync_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??data_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??dma_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
   \                     ??uart4_init_struct:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
   \                     ??uart0_init_struct:
   \   00000000                      DS8 28
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void MT9V032_CFG_init(void)
     90          {
   \                     MT9V032_CFG_init: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
     91            uint16 i,light_time;
     92            uint8 MT9V032_CFG[8];//定义数据包
     93            my_delay(9999999);//延时以保证摄像头上面的51完成上电初始化
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0x98967f
   \   00000006   0x.... 0x....      BL       my_delay
     94            MT9V032_CFG[0] = 0xFF; //数据包帧头         
   \   0000000A   0x20FF             MOVS     R0,#+255
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     95            MT9V032_CFG[1] = 0x00; //命令位  
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
     96            switch(ROW) //分辨率选择位，不过列超过188后K60无法采集
     97            {
     98            case 480:MT9V032_CFG[2] = 8;break; //对应的分辨率为 480行）*188（列）
     99            case 240:MT9V032_CFG[2] = 9;break;//对应的分辨率为 240行）*188（列）
    100            case 120:MT9V032_CFG[2] = 10;break;//对应的分辨率为 120行）*188（列）
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0xF88D 0x0002      STRB     R0,[SP, #+2]
    101            default :MT9V032_CFG[2] = 10;break;
    102            }   
    103            MT9V032_CFG[3] = 100;  //fps一秒钟拍摄图像帧数设置，设置图像帧率.行数不同可设置的范围也不同,范围限制  120行的时候是1-200,240行的时候是1-132,480行的时候是1-66                  
   \   0000001C   0x2064             MOVS     R0,#+100
   \   0000001E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    104            //曝光时间越大图像越亮     由于最大曝光时间受到fps与分辨率的共同影响，这里不给出具体范围，可以直接把曝光设置为1000，摄像头上的51收到之后会根据分辨率及FPS计算最大曝光时间，然后把
    105            //曝光时间设置为最大曝光时间，并且会返回当前设置的最大曝光时间，这样就可以知道最大可以设置的曝光时间是多少了，然后觉得图像过亮，就可以在这个最大曝光值的基础上相应减少。
    106            light_time = 120; //可调
   \   00000022   0x2178             MOVS     R1,#+120
    107            MT9V032_CFG[4] = light_time>>8;          //曝光时间高八位   
   \   00000024   0x0008             MOVS     R0,R1
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0x0A00             LSRS     R0,R0,#+8
   \   0000002A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    108            MT9V032_CFG[5] = (uint8)light_time;      //曝光时间低八位  
   \   0000002E   0xF88D 0x1005      STRB     R1,[SP, #+5]
    109            MT9V032_CFG[6] = 0;    //设置自动曝光，0表示关闭
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF88D 0x0006      STRB     R0,[SP, #+6]
    110            MT9V032_CFG[7] = 0x5A;  //帧尾 
   \   00000038   0x205A             MOVS     R0,#+90
   \   0000003A   0xF88D 0x0007      STRB     R0,[SP, #+7]
    111            for(i=0;i<8;i++)
   \   0000003E   0x2400             MOVS     R4,#+0
   \   00000040   0xE009             B.N      ??MT9V032_CFG_init_0
    112            {
    113              LPLD_UART_PutChar(UART0,MT9V032_CFG[i]);
   \                     ??MT9V032_CFG_init_1: (+1)
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000046   0x5620             LDRSB    R0,[R4, R0]
   \   00000048   0x0001             MOVS     R1,R0
   \   0000004A   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable6_14  ;; 0x4006a000
   \   00000050   0x.... 0x....      BL       LPLD_UART_PutChar
    114            }
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \                     ??MT9V032_CFG_init_0: (+1)
   \   00000056   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000058   0x2C08             CMP      R4,#+8
   \   0000005A   0xDBF2             BLT.N    ??MT9V032_CFG_init_1
    115            my_delay(9999999);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable6_16  ;; 0x98967f
   \   00000060   0x.... 0x....      BL       my_delay
    116          }
   \   00000064   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void my_delay(long t)
    119          {
    120              while(t--);
   \                     my_delay: (+1)
   \                     ??my_delay_0: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD1FB             BNE.N    ??my_delay_0
    121          }
   \   00000008   0x4770             BX       LR               ;; return
    122          

   \                                 In section .text, align 4, keep-with-next
    123          void porte_isr()
    124          {  
    125            if(LPLD_GPIO_IsPinxExt(PORTE, GPIO_Pin12)) // 场中断          
   \                     porte_isr: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_17  ;; 0x4004d0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x04C0             LSLS     R0,R0,#+19
   \   00000008   0xD52A             BPL.N    ??porte_isr_0
    126            {     
    127              LPLD_GPIO_ClearIntFlag(PORTE);
   \   0000000A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable6_17  ;; 0x4004d0a0
   \   00000012   0x6008             STR      R0,[R1, #+0]
    128              if( (WhichBuffer==1&&lock!=1) || (WhichBuffer==2&&lock!=2) )//将要传图1且图1没有在处理，或者将要传图2且图2没有在处理
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable6_18
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD104             BNE.N    ??porte_isr_1
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6_19
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD109             BNE.N    ??porte_isr_2
   \                     ??porte_isr_1: (+1)
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable6_18
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD109             BNE.N    ??porte_isr_3
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable6_19
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2802             CMP      R0,#+2
   \   0000003A   0xD004             BEQ.N    ??porte_isr_3
    129                start_flag=1; //丢弃不完整的第一帧图像，DMA启动标志，采集开始
   \                     ??porte_isr_2: (+1)
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable6_20
   \   00000042   0x7008             STRB     R0,[R1, #+0]
   \   00000044   0xE003             B.N      ??porte_isr_4
    130              else
    131                start_flag=0;  //忙，不传图
   \                     ??porte_isr_3: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable6_20
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    132              rowAdr=0;
   \                     ??porte_isr_4: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable6_21
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    133              row=0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable6_22
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
   \   0000005E   0xE069             B.N      ??porte_isr_5
    134            } 
    135            else if(LPLD_GPIO_IsPinxExt(PORTE, GPIO_Pin10)&&start_flag==1) //行中断，逐行采集                                                 
   \                     ??porte_isr_0: (+1)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable6_17  ;; 0x4004d0a0
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x0540             LSLS     R0,R0,#+21
   \   00000068   0xD564             BPL.N    ??porte_isr_5
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable6_20
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD15F             BNE.N    ??porte_isr_5
    136            {
    137              LPLD_GPIO_ClearIntFlag(PORTE);
   \   00000074   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable6_17  ;; 0x4004d0a0
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    138              row++;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6_22
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable6_22
   \   0000008A   0x7008             STRB     R0,[R1, #+0]
    139              if(row>=ROWbegin && row<ROWend)
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable6_22
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x381E             SUBS     R0,R0,#+30
   \   00000094   0x285A             CMP      R0,#+90
   \   00000096   0xD22A             BCS.N    ??porte_isr_6
    140              {
    141                if(WhichBuffer==1)
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable6_18
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x2801             CMP      R0,#+1
   \   000000A0   0xD10B             BNE.N    ??porte_isr_7
    142                  LPLD_DMA_LoadDstAddr(DMA_CH0,(Image1[rowAdr]));//加载或更换目的地址
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable6_11
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable6_21
   \   000000AA   0x7809             LDRB     R1,[R1, #+0]
   \   000000AC   0x22B4             MOVS     R2,#+180
   \   000000AE   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable6_23  ;; 0x40009010
   \   000000B6   0x6008             STR      R0,[R1, #+0]
   \   000000B8   0xE00A             B.N      ??porte_isr_8
    143                else
    144                  LPLD_DMA_LoadDstAddr(DMA_CH0,(Image2[rowAdr]));
   \                     ??porte_isr_7: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable6_24
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable6_21
   \   000000C2   0x7809             LDRB     R1,[R1, #+0]
   \   000000C4   0x22B4             MOVS     R2,#+180
   \   000000C6   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable6_23  ;; 0x40009010
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    145                LPLD_DMA_EnableReq(DMA_CH0);//初始化中设定主循环结束屏蔽请求源，故每一行都需重新使能请求源
   \                     ??porte_isr_8: (+1)
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable6_25  ;; 0x4000800c
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable6_25  ;; 0x4000800c
   \   000000DE   0x6008             STR      R0,[R1, #+0]
    146                rowAdr++; 
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable6_21
   \   000000E4   0x7800             LDRB     R0,[R0, #+0]
   \   000000E6   0x1C40             ADDS     R0,R0,#+1
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable6_21
   \   000000EC   0x7008             STRB     R0,[R1, #+0]
    147              }
    148              if(row>=ROWend)
   \                     ??porte_isr_6: (+1)
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable6_22
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x2878             CMP      R0,#+120
   \   000000F6   0xDB1D             BLT.N    ??porte_isr_5
    149              {
    150                LPLD_DMA_DisableReq(DMA_CH0);//采集结束，屏蔽DMA请求源
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable6_25  ;; 0x4000800c
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x0840             LSRS     R0,R0,#+1
   \   00000100   0x0040             LSLS     R0,R0,#+1
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable6_25  ;; 0x4000800c
   \   00000106   0x6008             STR      R0,[R1, #+0]
    151                if(WhichBuffer==1)
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable6_18
   \   0000010C   0x7800             LDRB     R0,[R0, #+0]
   \   0000010E   0x2801             CMP      R0,#+1
   \   00000110   0xD104             BNE.N    ??porte_isr_9
    152                  WhichBuffer=2;  //切换传图，图1图2依次传输
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable6_18
   \   00000118   0x7008             STRB     R0,[R1, #+0]
   \   0000011A   0xE003             B.N      ??porte_isr_10
    153                else
    154                  WhichBuffer=1;
   \                     ??porte_isr_9: (+1)
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable6_18
   \   00000122   0x7008             STRB     R0,[R1, #+0]
    155                end_flag=1;
   \                     ??porte_isr_10: (+1)
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable6_26
   \   0000012A   0x7008             STRB     R0,[R1, #+0]
    156                start_flag=0;
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable6_20
   \   00000132   0x7008             STRB     R0,[R1, #+0]
    157              }
    158            }
    159          }
   \                     ??porte_isr_5: (+1)
   \   00000134   0x4770             BX       LR               ;; return
    160          

   \                                 In section .bss, align 4
    161          float proportion_lightpoint; //亮点比例
   \                     proportion_lightpoint:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    162          void Calculate_Middle_Point(void)
    163          {
   \                     Calculate_Middle_Point: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
    164            int i,j,k=0,prok=0,minj=COLUMN,maxj=0,mini=ROWend,maxi=ROWbegin;
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x23B4             MOVS     R3,#+180
   \   0000000C   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000010   0x2078             MOVS     R0,#+120
   \   00000012   0x201E             MOVS     R0,#+30
    165            int pointy,pointx;
    166            int picture_maxj=0,picture_minj=COLUMN,picture_maxi=0,picture_mini=ROWend;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \   00000018   0xF05F 0x08B4      MOVS     R8,#+180
   \   0000001C   0x2600             MOVS     R6,#+0
   \   0000001E   0x2578             MOVS     R5,#+120
    167            int picture_lightpoint_number=0;
   \   00000020   0x2000             MOVS     R0,#+0
    168            uint8 nopoint_row=0;
   \   00000022   0xF05F 0x0900      MOVS     R9,#+0
    169            uint8 isolate_flag=0;
   \   00000026   0x2400             MOVS     R4,#+0
    170            
    171            
    172            if(WhichBuffer == 2)//正在传图2
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable6_18
   \   0000002C   0x7809             LDRB     R1,[R1, #+0]
   \   0000002E   0x2902             CMP      R1,#+2
   \   00000030   0xF040 0x809F      BNE.W    ??Calculate_Middle_Point_0
    173            {
    174               lock=1;//锁图1，处理图1
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x.... 0x....      LDR.W    R12,??DataTable6_19
   \   0000003A   0xF88C 0x1000      STRB     R1,[R12, #+0]
    175               for (i=ROWnum-1;i>0 && isolate_flag==0;i--)
   \   0000003E   0x2159             MOVS     R1,#+89
   \   00000040   0xE00A             B.N      ??Calculate_Middle_Point_1
    176               {
    177                //  for (j=COLUMN-1;j>0;j--)//从下往上扫描
    178                 for (j=140;j>40 && isolate_flag==0;j--)//从下往上扫描
    179                  {
    180                    if (nopoint_row<=5)//还没有分离点
    181                    {
    182                      if(Image1[i][j]>=setvalue)
    183                      {
    184                          k++;
    185                          if(j<=minj)
    186                            minj=j;
    187                          if(j>=maxj)
    188                            maxj=j;
    189                          if (j<=picture_minj)
    190                            picture_minj=j;
    191                          if(j>=maxj)
    192                            picture_maxj=j;
    193                          if (i<=picture_mini)
    194                            picture_mini=i;
    195                          if (i>=picture_maxi)
    196                            picture_maxi=i;             //计算图像的左右极限,上下极限
    197                      }
    198                    }
    199                    else 
    200                    {
    201                      if(Image1[i][j]>=setvalue)
    202                        isolate_flag=1;
    203                        
    204                    }
    205                  }//一行处理完毕
    206                  
    207                  if(k>prok )
    208                  {
    209                    if (i>35 && k>15 || i<=35 && i>=14 && k>4 && k<15|| i<14 && k>2)
    210                    {
    211                      prok=k;
    212                      pointy=i;
    213                      pointx=(minj+maxj)/2;
    214                      nopoint_row=0;
    215                    }
    216                  }
    217                  else if (k<prok && k==0) //统计非连通行数
   \                     ??Calculate_Middle_Point_2: (+1)
   \   00000042   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   00000046   0x4562             CMP      R2,R12
   \   00000048   0xDA03             BGE.N    ??Calculate_Middle_Point_3
   \   0000004A   0x2A00             CMP      R2,#+0
   \   0000004C   0xD101             BNE.N    ??Calculate_Middle_Point_3
    218                  {
    219                    nopoint_row++;
   \   0000004E   0xF119 0x0901      ADDS     R9,R9,#+1
    220                  }
    221                  picture_lightpoint_number+=k;
   \                     ??Calculate_Middle_Point_3: (+1)
   \   00000052   0x1810             ADDS     R0,R2,R0
    222                  k=0;
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x1E49             SUBS     R1,R1,#+1
   \                     ??Calculate_Middle_Point_1: (+1)
   \   00000058   0x2901             CMP      R1,#+1
   \   0000005A   0xDB65             BLT.N    ??Calculate_Middle_Point_4
   \   0000005C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005E   0x2C00             CMP      R4,#+0
   \   00000060   0xD162             BNE.N    ??Calculate_Middle_Point_4
   \   00000062   0xF05F 0x0A8C      MOVS     R10,#+140
   \   00000066   0xE010             B.N      ??Calculate_Middle_Point_5
   \                     ??Calculate_Middle_Point_6: (+1)
   \   00000068   0x.... 0x....      LDR.W    R12,??DataTable6_11
   \   0000006C   0xF05F 0x0BB4      MOVS     R11,#+180
   \   00000070   0xFB0B 0xCC01      MLA      R12,R11,R1,R12
   \   00000074   0xF81A 0xC00C      LDRB     R12,[R10, R12]
   \   00000078   0x.... 0x....      LDR.W    R11,??DataTable6_27
   \   0000007C   0xF89B 0xB000      LDRB     R11,[R11, #+0]
   \   00000080   0x45DC             CMP      R12,R11
   \   00000082   0xD300             BCC.N    ??Calculate_Middle_Point_7
   \   00000084   0x2401             MOVS     R4,#+1
   \                     ??Calculate_Middle_Point_7: (+1)
   \   00000086   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \                     ??Calculate_Middle_Point_5: (+1)
   \   0000008A   0xF1BA 0x0F29      CMP      R10,#+41
   \   0000008E   0xDB2A             BLT.N    ??Calculate_Middle_Point_8
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x2C00             CMP      R4,#+0
   \   00000094   0xD127             BNE.N    ??Calculate_Middle_Point_8
   \   00000096   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000009A   0xF1B9 0x0F06      CMP      R9,#+6
   \   0000009E   0xDAE3             BGE.N    ??Calculate_Middle_Point_6
   \   000000A0   0x.... 0x....      LDR.W    R12,??DataTable6_11
   \   000000A4   0xF05F 0x0BB4      MOVS     R11,#+180
   \   000000A8   0xFB0B 0xCC01      MLA      R12,R11,R1,R12
   \   000000AC   0xF81A 0xC00C      LDRB     R12,[R10, R12]
   \   000000B0   0x.... 0x....      LDR.W    R11,??DataTable6_27
   \   000000B4   0xF89B 0xB000      LDRB     R11,[R11, #+0]
   \   000000B8   0x45DC             CMP      R12,R11
   \   000000BA   0xD3E4             BCC.N    ??Calculate_Middle_Point_7
   \   000000BC   0x1C52             ADDS     R2,R2,#+1
   \   000000BE   0x4553             CMP      R3,R10
   \   000000C0   0xDB00             BLT.N    ??Calculate_Middle_Point_9
   \   000000C2   0x4653             MOV      R3,R10
   \                     ??Calculate_Middle_Point_9: (+1)
   \   000000C4   0x45F2             CMP      R10,LR
   \   000000C6   0xDB00             BLT.N    ??Calculate_Middle_Point_10
   \   000000C8   0x46D6             MOV      LR,R10
   \                     ??Calculate_Middle_Point_10: (+1)
   \   000000CA   0x45D0             CMP      R8,R10
   \   000000CC   0xDB00             BLT.N    ??Calculate_Middle_Point_11
   \   000000CE   0x46D0             MOV      R8,R10
   \                     ??Calculate_Middle_Point_11: (+1)
   \   000000D0   0x45F2             CMP      R10,LR
   \   000000D2   0xDB01             BLT.N    ??Calculate_Middle_Point_12
   \   000000D4   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \                     ??Calculate_Middle_Point_12: (+1)
   \   000000D8   0x428D             CMP      R5,R1
   \   000000DA   0xDB00             BLT.N    ??Calculate_Middle_Point_13
   \   000000DC   0x000D             MOVS     R5,R1
   \                     ??Calculate_Middle_Point_13: (+1)
   \   000000DE   0x42B1             CMP      R1,R6
   \   000000E0   0xDBD1             BLT.N    ??Calculate_Middle_Point_7
   \   000000E2   0x000E             MOVS     R6,R1
   \   000000E4   0xE7CF             B.N      ??Calculate_Middle_Point_7
   \                     ??Calculate_Middle_Point_8: (+1)
   \   000000E6   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   000000EA   0x4594             CMP      R12,R2
   \   000000EC   0xDAA9             BGE.N    ??Calculate_Middle_Point_2
   \   000000EE   0x2924             CMP      R1,#+36
   \   000000F0   0xDB01             BLT.N    ??Calculate_Middle_Point_14
   \   000000F2   0x2A10             CMP      R2,#+16
   \   000000F4   0xDA0D             BGE.N    ??Calculate_Middle_Point_15
   \                     ??Calculate_Middle_Point_14: (+1)
   \   000000F6   0xF1B1 0x0C0E      SUBS     R12,R1,#+14
   \   000000FA   0xF1BC 0x0F16      CMP      R12,#+22
   \   000000FE   0xD204             BCS.N    ??Calculate_Middle_Point_16
   \   00000100   0xF1B2 0x0C05      SUBS     R12,R2,#+5
   \   00000104   0xF1BC 0x0F0A      CMP      R12,#+10
   \   00000108   0xD303             BCC.N    ??Calculate_Middle_Point_15
   \                     ??Calculate_Middle_Point_16: (+1)
   \   0000010A   0x290E             CMP      R1,#+14
   \   0000010C   0xDAA1             BGE.N    ??Calculate_Middle_Point_3
   \   0000010E   0x2A03             CMP      R2,#+3
   \   00000110   0xDB9F             BLT.N    ??Calculate_Middle_Point_3
   \                     ??Calculate_Middle_Point_15: (+1)
   \   00000112   0x9200             STR      R2,[SP, #+0]
   \   00000114   0x9102             STR      R1,[SP, #+8]
   \   00000116   0xEB1E 0x0703      ADDS     R7,LR,R3
   \   0000011A   0xF05F 0x0C02      MOVS     R12,#+2
   \   0000011E   0xFB97 0xF7FC      SDIV     R7,R7,R12
   \   00000122   0xF05F 0x0900      MOVS     R9,#+0
   \   00000126   0xE794             B.N      ??Calculate_Middle_Point_3
    223               }//一幅图处理完毕
    224              /**********计算块区比例**********/
    225               proportion_lightpoint = 1.0*picture_lightpoint_number / (picture_maxi-picture_mini+1) / (picture_maxj-picture_minj+1);
   \                     ??Calculate_Middle_Point_4: (+1)
   \   00000128   0x.... 0x....      BL       __aeabi_i2d
   \   0000012C   0x2200             MOVS     R2,#+0
   \   0000012E   0x....             LDR.N    R3,??DataTable6_28  ;; 0x3ff00000
   \   00000130   0x.... 0x....      BL       __aeabi_dmul
   \   00000134   0x4682             MOV      R10,R0
   \   00000136   0x468B             MOV      R11,R1
   \   00000138   0x1B70             SUBS     R0,R6,R5
   \   0000013A   0x1C40             ADDS     R0,R0,#+1
   \   0000013C   0x.... 0x....      BL       __aeabi_i2d
   \   00000140   0x0002             MOVS     R2,R0
   \   00000142   0x000B             MOVS     R3,R1
   \   00000144   0x4650             MOV      R0,R10
   \   00000146   0x4659             MOV      R1,R11
   \   00000148   0x.... 0x....      BL       __aeabi_ddiv
   \   0000014C   0x4682             MOV      R10,R0
   \   0000014E   0x468B             MOV      R11,R1
   \   00000150   0x9801             LDR      R0,[SP, #+4]
   \   00000152   0xEBB0 0x0008      SUBS     R0,R0,R8
   \   00000156   0x1C40             ADDS     R0,R0,#+1
   \   00000158   0x.... 0x....      BL       __aeabi_i2d
   \   0000015C   0x0002             MOVS     R2,R0
   \   0000015E   0x000B             MOVS     R3,R1
   \   00000160   0x4650             MOV      R0,R10
   \   00000162   0x4659             MOV      R1,R11
   \   00000164   0x.... 0x....      BL       __aeabi_ddiv
   \   00000168   0x.... 0x....      BL       __aeabi_d2f
   \   0000016C   0x....             LDR.N    R1,??DataTable6_29
   \   0000016E   0x6008             STR      R0,[R1, #+0]
   \   00000170   0xE0A2             B.N      ??Calculate_Middle_Point_17
    226            }
    227            else if(WhichBuffer == 1)//正在传图1
   \                     ??Calculate_Middle_Point_0: (+1)
   \   00000172   0x....             LDR.N    R1,??DataTable6_18
   \   00000174   0x7809             LDRB     R1,[R1, #+0]
   \   00000176   0x2901             CMP      R1,#+1
   \   00000178   0xF040 0x809E      BNE.W    ??Calculate_Middle_Point_17
    228             {
    229               lock=1;//锁图1，处理图1
   \   0000017C   0x2101             MOVS     R1,#+1
   \   0000017E   0x.... 0x....      LDR.W    R12,??DataTable6_19
   \   00000182   0xF88C 0x1000      STRB     R1,[R12, #+0]
    230               for (i=ROWnum-1;i>0 && isolate_flag==0;i--)
   \   00000186   0x2159             MOVS     R1,#+89
   \   00000188   0xE00A             B.N      ??Calculate_Middle_Point_18
    231               {
    232                //  for (j=COLUMN-1;j>0;j--)//从下往上扫描
    233                 for (j=140;j>40 && isolate_flag==0;j--)//从下往上扫描
    234                  {
    235                    if (nopoint_row<=5)//还没有分离点
    236                    {
    237                      if(Image2[i][j]>=setvalue)
    238                      {
    239                          k++;
    240                          if(j<=minj)
    241                            minj=j;
    242                          if(j>=maxj)
    243                            maxj=j;
    244                          if (j<=picture_minj)
    245                            picture_minj=j;
    246                          if(j>=maxj)
    247                            picture_maxj=j;
    248                          if (i<=picture_mini)
    249                            picture_mini=i;
    250                          if (i>=picture_maxi)
    251                            picture_maxi=i;             //计算图像的左右极限,上下极限
    252                      }
    253                    }
    254                    else 
    255                    {
    256                      if(Image2[i][j]>=setvalue)
    257                        isolate_flag=1;
    258                        
    259                    }
    260                  }//一行处理完毕
    261                  
    262                  if(k>prok )
    263                  {
    264                    if (i>35 && k>15 || i<=35 && i>=14 && k>4 && k<15|| i<14 && k>2)
    265                    {
    266                      prok=k;
    267                      pointy=i;
    268                      pointx=(minj+maxj)/2;
    269                      nopoint_row=0;
    270                    }
    271                  }
    272                  else if (k<prok && k==0) //统计非连通行数
   \                     ??Calculate_Middle_Point_19: (+1)
   \   0000018A   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   0000018E   0x4562             CMP      R2,R12
   \   00000190   0xDA03             BGE.N    ??Calculate_Middle_Point_20
   \   00000192   0x2A00             CMP      R2,#+0
   \   00000194   0xD101             BNE.N    ??Calculate_Middle_Point_20
    273                  {
    274                    nopoint_row++;
   \   00000196   0xF119 0x0901      ADDS     R9,R9,#+1
    275                  }
    276                  picture_lightpoint_number+=k;
   \                     ??Calculate_Middle_Point_20: (+1)
   \   0000019A   0x1810             ADDS     R0,R2,R0
    277                  k=0;
   \   0000019C   0x2200             MOVS     R2,#+0
   \   0000019E   0x1E49             SUBS     R1,R1,#+1
   \                     ??Calculate_Middle_Point_18: (+1)
   \   000001A0   0x2901             CMP      R1,#+1
   \   000001A2   0xDB65             BLT.N    ??Calculate_Middle_Point_21
   \   000001A4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001A6   0x2C00             CMP      R4,#+0
   \   000001A8   0xD162             BNE.N    ??Calculate_Middle_Point_21
   \   000001AA   0xF05F 0x0A8C      MOVS     R10,#+140
   \   000001AE   0xE010             B.N      ??Calculate_Middle_Point_22
   \                     ??Calculate_Middle_Point_23: (+1)
   \   000001B0   0x.... 0x....      LDR.W    R12,??DataTable6_24
   \   000001B4   0xF05F 0x0BB4      MOVS     R11,#+180
   \   000001B8   0xFB0B 0xCC01      MLA      R12,R11,R1,R12
   \   000001BC   0xF81A 0xC00C      LDRB     R12,[R10, R12]
   \   000001C0   0x.... 0x....      LDR.W    R11,??DataTable6_27
   \   000001C4   0xF89B 0xB000      LDRB     R11,[R11, #+0]
   \   000001C8   0x45DC             CMP      R12,R11
   \   000001CA   0xD300             BCC.N    ??Calculate_Middle_Point_24
   \   000001CC   0x2401             MOVS     R4,#+1
   \                     ??Calculate_Middle_Point_24: (+1)
   \   000001CE   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \                     ??Calculate_Middle_Point_22: (+1)
   \   000001D2   0xF1BA 0x0F29      CMP      R10,#+41
   \   000001D6   0xDB2A             BLT.N    ??Calculate_Middle_Point_25
   \   000001D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001DA   0x2C00             CMP      R4,#+0
   \   000001DC   0xD127             BNE.N    ??Calculate_Middle_Point_25
   \   000001DE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001E2   0xF1B9 0x0F06      CMP      R9,#+6
   \   000001E6   0xDAE3             BGE.N    ??Calculate_Middle_Point_23
   \   000001E8   0x.... 0x....      LDR.W    R12,??DataTable6_24
   \   000001EC   0xF05F 0x0BB4      MOVS     R11,#+180
   \   000001F0   0xFB0B 0xCC01      MLA      R12,R11,R1,R12
   \   000001F4   0xF81A 0xC00C      LDRB     R12,[R10, R12]
   \   000001F8   0x.... 0x....      LDR.W    R11,??DataTable6_27
   \   000001FC   0xF89B 0xB000      LDRB     R11,[R11, #+0]
   \   00000200   0x45DC             CMP      R12,R11
   \   00000202   0xD3E4             BCC.N    ??Calculate_Middle_Point_24
   \   00000204   0x1C52             ADDS     R2,R2,#+1
   \   00000206   0x4553             CMP      R3,R10
   \   00000208   0xDB00             BLT.N    ??Calculate_Middle_Point_26
   \   0000020A   0x4653             MOV      R3,R10
   \                     ??Calculate_Middle_Point_26: (+1)
   \   0000020C   0x45F2             CMP      R10,LR
   \   0000020E   0xDB00             BLT.N    ??Calculate_Middle_Point_27
   \   00000210   0x46D6             MOV      LR,R10
   \                     ??Calculate_Middle_Point_27: (+1)
   \   00000212   0x45D0             CMP      R8,R10
   \   00000214   0xDB00             BLT.N    ??Calculate_Middle_Point_28
   \   00000216   0x46D0             MOV      R8,R10
   \                     ??Calculate_Middle_Point_28: (+1)
   \   00000218   0x45F2             CMP      R10,LR
   \   0000021A   0xDB01             BLT.N    ??Calculate_Middle_Point_29
   \   0000021C   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \                     ??Calculate_Middle_Point_29: (+1)
   \   00000220   0x428D             CMP      R5,R1
   \   00000222   0xDB00             BLT.N    ??Calculate_Middle_Point_30
   \   00000224   0x000D             MOVS     R5,R1
   \                     ??Calculate_Middle_Point_30: (+1)
   \   00000226   0x42B1             CMP      R1,R6
   \   00000228   0xDBD1             BLT.N    ??Calculate_Middle_Point_24
   \   0000022A   0x000E             MOVS     R6,R1
   \   0000022C   0xE7CF             B.N      ??Calculate_Middle_Point_24
   \                     ??Calculate_Middle_Point_25: (+1)
   \   0000022E   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \   00000232   0x4594             CMP      R12,R2
   \   00000234   0xDAA9             BGE.N    ??Calculate_Middle_Point_19
   \   00000236   0x2924             CMP      R1,#+36
   \   00000238   0xDB01             BLT.N    ??Calculate_Middle_Point_31
   \   0000023A   0x2A10             CMP      R2,#+16
   \   0000023C   0xDA0D             BGE.N    ??Calculate_Middle_Point_32
   \                     ??Calculate_Middle_Point_31: (+1)
   \   0000023E   0xF1B1 0x0C0E      SUBS     R12,R1,#+14
   \   00000242   0xF1BC 0x0F16      CMP      R12,#+22
   \   00000246   0xD204             BCS.N    ??Calculate_Middle_Point_33
   \   00000248   0xF1B2 0x0C05      SUBS     R12,R2,#+5
   \   0000024C   0xF1BC 0x0F0A      CMP      R12,#+10
   \   00000250   0xD303             BCC.N    ??Calculate_Middle_Point_32
   \                     ??Calculate_Middle_Point_33: (+1)
   \   00000252   0x290E             CMP      R1,#+14
   \   00000254   0xDAA1             BGE.N    ??Calculate_Middle_Point_20
   \   00000256   0x2A03             CMP      R2,#+3
   \   00000258   0xDB9F             BLT.N    ??Calculate_Middle_Point_20
   \                     ??Calculate_Middle_Point_32: (+1)
   \   0000025A   0x9200             STR      R2,[SP, #+0]
   \   0000025C   0x9102             STR      R1,[SP, #+8]
   \   0000025E   0xEB1E 0x0703      ADDS     R7,LR,R3
   \   00000262   0xF05F 0x0C02      MOVS     R12,#+2
   \   00000266   0xFB97 0xF7FC      SDIV     R7,R7,R12
   \   0000026A   0xF05F 0x0900      MOVS     R9,#+0
   \   0000026E   0xE794             B.N      ??Calculate_Middle_Point_20
    278               }//一幅图处理完毕
    279              /**********计算块区比例**********/
    280               proportion_lightpoint = 1.0*picture_lightpoint_number / (picture_maxi-picture_mini+1) / (picture_maxj-picture_minj+1);
   \                     ??Calculate_Middle_Point_21: (+1)
   \   00000270   0x.... 0x....      BL       __aeabi_i2d
   \   00000274   0x2200             MOVS     R2,#+0
   \   00000276   0x....             LDR.N    R3,??DataTable6_28  ;; 0x3ff00000
   \   00000278   0x.... 0x....      BL       __aeabi_dmul
   \   0000027C   0x4682             MOV      R10,R0
   \   0000027E   0x468B             MOV      R11,R1
   \   00000280   0x1B70             SUBS     R0,R6,R5
   \   00000282   0x1C40             ADDS     R0,R0,#+1
   \   00000284   0x.... 0x....      BL       __aeabi_i2d
   \   00000288   0x0002             MOVS     R2,R0
   \   0000028A   0x000B             MOVS     R3,R1
   \   0000028C   0x4650             MOV      R0,R10
   \   0000028E   0x4659             MOV      R1,R11
   \   00000290   0x.... 0x....      BL       __aeabi_ddiv
   \   00000294   0x4682             MOV      R10,R0
   \   00000296   0x468B             MOV      R11,R1
   \   00000298   0x9801             LDR      R0,[SP, #+4]
   \   0000029A   0xEBB0 0x0008      SUBS     R0,R0,R8
   \   0000029E   0x1C40             ADDS     R0,R0,#+1
   \   000002A0   0x.... 0x....      BL       __aeabi_i2d
   \   000002A4   0x0002             MOVS     R2,R0
   \   000002A6   0x000B             MOVS     R3,R1
   \   000002A8   0x4650             MOV      R0,R10
   \   000002AA   0x4659             MOV      R1,R11
   \   000002AC   0x.... 0x....      BL       __aeabi_ddiv
   \   000002B0   0x.... 0x....      BL       __aeabi_d2f
   \   000002B4   0x....             LDR.N    R1,??DataTable6_29
   \   000002B6   0x6008             STR      R0,[R1, #+0]
    281            }
    282            lock=0; //解除图像锁定
   \                     ??Calculate_Middle_Point_17: (+1)
   \   000002B8   0x2000             MOVS     R0,#+0
   \   000002BA   0x....             LDR.N    R1,??DataTable6_19
   \   000002BC   0x7008             STRB     R0,[R1, #+0]
    283            //如果没有亮点
    284          
    285            if (prok==0||prok>50||isolate_flag||proportion_lightpoint<=0.5||picture_maxj-picture_minj+1>30||picture_maxi-picture_mini+1>30)
   \   000002BE   0x9800             LDR      R0,[SP, #+0]
   \   000002C0   0x2800             CMP      R0,#+0
   \   000002C2   0xD015             BEQ.N    ??Calculate_Middle_Point_34
   \   000002C4   0x9800             LDR      R0,[SP, #+0]
   \   000002C6   0x2833             CMP      R0,#+51
   \   000002C8   0xDA12             BGE.N    ??Calculate_Middle_Point_34
   \   000002CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002CC   0x2C00             CMP      R4,#+0
   \   000002CE   0xD10F             BNE.N    ??Calculate_Middle_Point_34
   \   000002D0   0x....             LDR.N    R0,??DataTable6_29
   \   000002D2   0x6800             LDR      R0,[R0, #+0]
   \   000002D4   0x....             LDR.N    R1,??DataTable6_30  ;; 0x3f000001
   \   000002D6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000002DA   0xD309             BCC.N    ??Calculate_Middle_Point_34
   \   000002DC   0x9801             LDR      R0,[SP, #+4]
   \   000002DE   0xEBB0 0x0008      SUBS     R0,R0,R8
   \   000002E2   0x1C40             ADDS     R0,R0,#+1
   \   000002E4   0x281F             CMP      R0,#+31
   \   000002E6   0xDA03             BGE.N    ??Calculate_Middle_Point_34
   \   000002E8   0x1B70             SUBS     R0,R6,R5
   \   000002EA   0x1C40             ADDS     R0,R0,#+1
   \   000002EC   0x281F             CMP      R0,#+31
   \   000002EE   0xDB03             BLT.N    ??Calculate_Middle_Point_35
    286              NOpoint=1;
   \                     ??Calculate_Middle_Point_34: (+1)
   \   000002F0   0x2001             MOVS     R0,#+1
   \   000002F2   0x....             LDR.N    R1,??DataTable6_31
   \   000002F4   0x7008             STRB     R0,[R1, #+0]
   \   000002F6   0xE007             B.N      ??Calculate_Middle_Point_36
    287            else 
    288            {
    289              NOpoint=0;
   \                     ??Calculate_Middle_Point_35: (+1)
   \   000002F8   0x2000             MOVS     R0,#+0
   \   000002FA   0x....             LDR.N    R1,??DataTable6_31
   \   000002FC   0x7008             STRB     R0,[R1, #+0]
    290              real_pointy=pointy;//一场图像真正的中点！！！
   \   000002FE   0x9802             LDR      R0,[SP, #+8]
   \   00000300   0x....             LDR.N    R1,??DataTable6_32
   \   00000302   0x7008             STRB     R0,[R1, #+0]
    291              real_pointx=pointx;//一场图像真正的中点！！！
   \   00000304   0x....             LDR.N    R0,??DataTable6_33
   \   00000306   0x7007             STRB     R7,[R0, #+0]
    292            }
    293              
    294          }
   \                     ??Calculate_Middle_Point_36: (+1)
   \   00000308   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    295          
    296          
    297          

   \                                 In section .text, align 2, keep-with-next
    298          void picture2pc(void)
    299          {
   \                     picture2pc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    300            int i,j;
    301             if(end_flag)
   \   00000002   0x....             LDR.N    R0,??DataTable6_26
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD02E             BEQ.N    ??picture2pc_0
    302            {
    303              disable_irq(PORTE_IRQn); 
   \   0000000A   0x205B             MOVS     R0,#+91
   \   0000000C   0x.... 0x....      BL       NVIC_DisableIRQ
    304              LPLD_UART_PutChar(UART4,0X01);
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x....             LDR.N    R0,??DataTable6_12  ;; 0x400ea000
   \   00000014   0x.... 0x....      BL       LPLD_UART_PutChar
    305              LPLD_UART_PutChar(UART4,0XFE);
   \   00000018   0xF07F 0x0101      MVNS     R1,#+1
   \   0000001C   0x....             LDR.N    R0,??DataTable6_12  ;; 0x400ea000
   \   0000001E   0x.... 0x....      BL       LPLD_UART_PutChar
    306              
    307              for(i=0;i<ROWend-ROWbegin;i++)
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE00D             B.N      ??picture2pc_1
    308              {
    309                for(j=0;j<COLUMN;j++)
    310                {       
    311                  LPLD_UART_PutChar(UART4,Image1[i][j]);
   \                     ??picture2pc_2: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable6_11
   \   00000028   0x21B4             MOVS     R1,#+180
   \   0000002A   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000002E   0x5628             LDRSB    R0,[R5, R0]
   \   00000030   0x0001             MOVS     R1,R0
   \   00000032   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000034   0x....             LDR.N    R0,??DataTable6_12  ;; 0x400ea000
   \   00000036   0x.... 0x....      BL       LPLD_UART_PutChar
    312                }
   \   0000003A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??picture2pc_3: (+1)
   \   0000003C   0x2DB4             CMP      R5,#+180
   \   0000003E   0xDBF2             BLT.N    ??picture2pc_2
   \   00000040   0x1C64             ADDS     R4,R4,#+1
   \                     ??picture2pc_1: (+1)
   \   00000042   0x2C5A             CMP      R4,#+90
   \   00000044   0xDA01             BGE.N    ??picture2pc_4
   \   00000046   0x2500             MOVS     R5,#+0
   \   00000048   0xE7F8             B.N      ??picture2pc_3
    313              }
    314              LPLD_UART_PutChar(UART4,0XFE);
   \                     ??picture2pc_4: (+1)
   \   0000004A   0xF07F 0x0101      MVNS     R1,#+1
   \   0000004E   0x....             LDR.N    R0,??DataTable6_12  ;; 0x400ea000
   \   00000050   0x.... 0x....      BL       LPLD_UART_PutChar
    315              LPLD_UART_PutChar(UART4,0X01);
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x....             LDR.N    R0,??DataTable6_12  ;; 0x400ea000
   \   00000058   0x.... 0x....      BL       LPLD_UART_PutChar
    316              enable_irq(PORTE_IRQn);
   \   0000005C   0x205B             MOVS     R0,#+91
   \   0000005E   0x.... 0x....      BL       NVIC_EnableIRQ
    317              end_flag=0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable6_26
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    318            }
    319            
    320          }
   \                     ??picture2pc_0: (+1)
   \   00000068   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ??dmaReq_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x00020003         DC32     0x20003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ??href_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x00090013         DC32     0x90013

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     ??vsync_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     ??data_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     ??dma_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x400FF110         DC32     0x400ff110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     Image1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x........         DC32     ??uart4_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     ??uart0_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x0098967F         DC32     0x98967f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x4004D0A0         DC32     0x4004d0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x........         DC32     WhichBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     lock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x........         DC32     start_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x........         DC32     rowAdr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x........         DC32     row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     Image2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x........         DC32     end_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x........         DC32     setvalue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   0x........         DC32     proportion_lightpoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   0x3F000001         DC32     0x3f000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_31:
   \   00000000   0x........         DC32     NOpoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_32:
   \   00000000   0x........         DC32     real_pointy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_33:
   \   00000000   0x........         DC32     real_pointx

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   Calculate_Middle_Point
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_i2d
        48 __aeabi_cfcmple
      16   MT9V032_CFG_init
        16   -> LPLD_UART_PutChar
        16   -> my_delay
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
      48   camera_init
        32   -> LPLD_DMA_Init
        32   -> LPLD_GPIO_EnableIrq
        32   -> LPLD_GPIO_Init
        32   -> LPLD_UART_EnableIrq
        32   -> LPLD_UART_Init
        32   -> MT9V032_CFG_init
        48   -> __aeabi_memcpy4
       0   my_delay
      16   picture2pc
        16   -> LPLD_UART_PutChar
        16   -> NVIC_DisableIRQ
        16   -> NVIC_EnableIRQ
       0   porte_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     780  Calculate_Middle_Point
   21600  Image1
   21600  Image2
     102  MT9V032_CFG_init
       1  NOpoint
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
       1  WhichBuffer
     530  camera_init
      20  data_port_struct
      20  dmaReq_port_struct
      44  dma_init_struct
       1  end_flag
      20  href_port_struct
       1  lock
      10  my_delay
     106  picture2pc
     310  porte_isr
       4  proportion_lightpoint
       1  real_pointx
       1  real_pointy
       1  row
       1  rowAdr
       1  setvalue
       1  start_flag
       4  sumtuan
      20  testsum
       4  testsum_average
      28  uart0_init_struct
      28  uart4_init_struct
      20  vsync_port_struct

 
 43 420 bytes in section .bss
      2 bytes in section .data
  2 018 bytes in section .text
 
  2 018 bytes of CODE memory
 43 422 bytes of DATA memory

Errors: none
Warnings: 2
