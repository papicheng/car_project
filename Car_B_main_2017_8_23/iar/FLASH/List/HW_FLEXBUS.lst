###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Aug/2017  10:34:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLEXBUS.c
#    Command line =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLEXBUS.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\List
#        -lB
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\List
#        -o
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR Systems\Embedded
#        Workbench 7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\app\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\CPU\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\FatFs\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\List\HW_FLEXBUS.lst
#    Object file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\Obj\HW_FLEXBUS.o
#
###############################################################################

G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\lib\LPLD\HW\HW_FLEXBUS.c
      1          /**
      2           * @file HW_FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "HW_FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \   00000000   0x4004C018         DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004C014   
   \              0x4004C010   
   \              0x4004C00C   
   \              0x4004C008   
   \              0x4004B028   
   \   00000018   0x4004B024         DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004B020   
   \              0x4004B01C   
   \              0x4004B018   
   \              0x4004B014   
   \              0x4004B010   
   \   00000030   0x4004B008         DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004B004   
   \              0x4004B000   
   \              0x4004A048   
   \              0x4004A044   
   \              0x4004A040   
   \   00000048   0x4004A02C         DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004A028   
   \              0x4004A024   
   \              0x4004A020   
   \              0x4004A01C   
   \              0x4004A018   
   \   00000060   0x4004B03C         DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004B038   
   \              0x4004B034   
   \              0x4004B030   
   \              0x4004A05C   
   \              0x4004A058   
   \   00000078   0x4004A054         DC32 4004A054H, 4004A050H
   \              0x4004A050   
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * LPLD_FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 LPLD_FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     LPLD_FlexBus_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \   00000006   0xF89D 0x4028      LDRB     R4,[SP, #+40]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \   0000000A   0x9D0B             LDR      R5,[SP, #+44]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \   0000000C   0x9E0C             LDR      R6,[SP, #+48]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \   0000000E   0xF89D 0x7034      LDRB     R7,[SP, #+52]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \   00000012   0xF89D 0x8035      LDRB     R8,[SP, #+53]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \   00000016   0xF89D 0x0036      LDRB     R0,[SP, #+54]
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \   0000001E   0xF89D 0x9037      LDRB     R9,[SP, #+55]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \   00000022   0xF89D 0xA038      LDRB     R10,[SP, #+56]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \   00000026   0xF89D 0xB039      LDRB     R11,[SP, #+57]
     58            uint32* pcr;
     59            uint8 n=0;
   \   0000002A   0x2000             MOVS     R0,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C06             CMP      R4,#+6
   \   00000030   0xDB03             BLT.N    ??LPLD_FlexBus_Init_0
   \   00000032   0x213E             MOVS     R1,#+62
   \   00000034   0x48A9             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000036   0x.... 0x....      BL       assert_failed
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
   \                     ??LPLD_FlexBus_Init_0: (+1)
   \   0000003A   0xF1B5 0x40C0      SUBS     R0,R5,#+1610612736
   \   0000003E   0xF1B0 0x4F00      CMP      R0,#-2147483648
   \   00000042   0xD303             BCC.N    ??LPLD_FlexBus_Init_2
   \   00000044   0x213F             MOVS     R1,#+63
   \   00000046   0x48A5             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000048   0x.... 0x....      BL       assert_failed
     64            ASSERT( addr_space != 0);    //寻址空间大小
   \                     ??LPLD_FlexBus_Init_2: (+1)
   \   0000004C   0x2E00             CMP      R6,#+0
   \   0000004E   0xD103             BNE.N    ??LPLD_FlexBus_Init_3
   \   00000050   0x2140             MOVS     R1,#+64
   \   00000052   0x48A2             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000054   0x.... 0x....      BL       assert_failed
     65            ASSERT( size <= 3);    //判断数据位宽
   \                     ??LPLD_FlexBus_Init_3: (+1)
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x2F04             CMP      R7,#+4
   \   0000005C   0xDB03             BLT.N    ??LPLD_FlexBus_Init_4
   \   0000005E   0x2141             MOVS     R1,#+65
   \   00000060   0x489E             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000062   0x.... 0x....      BL       assert_failed
     66            ASSERT( rah <= 3);     //判断读地址保持时间
   \                     ??LPLD_FlexBus_Init_4: (+1)
   \   00000066   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000006A   0xF1BA 0x0F04      CMP      R10,#+4
   \   0000006E   0xDB03             BLT.N    ??LPLD_FlexBus_Init_5
   \   00000070   0x2142             MOVS     R1,#+66
   \   00000072   0x489A             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000074   0x.... 0x....      BL       assert_failed
     67            ASSERT( wah <= 3);     //判断写地址保持时间
   \                     ??LPLD_FlexBus_Init_5: (+1)
   \   00000078   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000007C   0xF1BB 0x0F04      CMP      R11,#+4
   \   00000080   0xDB03             BLT.N    ??LPLD_FlexBus_Init_6
   \   00000082   0x2143             MOVS     R1,#+67
   \   00000084   0x4895             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000086   0x.... 0x....      BL       assert_failed
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \                     ??LPLD_FlexBus_Init_6: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x4994             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x220C             MOVS     R2,#+12
   \   00000092   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000096   0x6048             STR      R0,[R1, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \   00000098   0x4891             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x210C             MOVS     R1,#+12
   \   0000009E   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000000A2   0x6005             STR      R5,[R0, #+0]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \   000000A4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000A6   0x01B8             LSLS     R0,R7,#+6
   \   000000A8   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   000000AC   0x498C             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000AE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B0   0x220C             MOVS     R2,#+12
   \   000000B2   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000000B6   0x6088             STR      R0,[R1, #+8]
     75            
     76            if(justied)
   \   000000B8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000BC   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000C0   0xD00D             BEQ.N    ??LPLD_FlexBus_Init_7
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \   000000C2   0x4887             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C6   0x210C             MOVS     R1,#+12
   \   000000C8   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000000CC   0x6880             LDR      R0,[R0, #+8]
   \   000000CE   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   000000D2   0x4983             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D6   0x220C             MOVS     R2,#+12
   \   000000D8   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   000000DC   0x6088             STR      R0,[R1, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??LPLD_FlexBus_Init_7: (+1)
   \   000000DE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD00D             BEQ.N    ??LPLD_FlexBus_Init_8
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \   000000E6   0x487E             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000E8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EA   0x210C             MOVS     R1,#+12
   \   000000EC   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000000F0   0x6880             LDR      R0,[R0, #+8]
   \   000000F2   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   000000F6   0x497A             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FA   0x220C             MOVS     R2,#+12
   \   000000FC   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000100   0x6088             STR      R0,[R1, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??LPLD_FlexBus_Init_8: (+1)
   \   00000102   0x4877             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0x210C             MOVS     R1,#+12
   \   00000108   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000010C   0x6880             LDR      R0,[R0, #+8]
   \   0000010E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000112   0xEA5F 0x2189      LSLS     R1,R9,#+10
   \   00000116   0xF411 0x417C      ANDS     R1,R1,#0xFC00
   \   0000011A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000011E   0xEA5F 0x428A      LSLS     R2,R10,#+18
   \   00000122   0xF412 0x2240      ANDS     R2,R2,#0xC0000
   \   00000126   0x4311             ORRS     R1,R2,R1
   \   00000128   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000012C   0xEA5F 0x420B      LSLS     R2,R11,#+16
   \   00000130   0xF412 0x3240      ANDS     R2,R2,#0x30000
   \   00000134   0x4311             ORRS     R1,R2,R1
   \   00000136   0x4308             ORRS     R0,R1,R0
   \   00000138   0x4969             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000013A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013C   0x220C             MOVS     R2,#+12
   \   0000013E   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000142   0x6088             STR      R0,[R1, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \   00000144   0x1E70             SUBS     R0,R6,#+1
   \   00000146   0x0C06             LSRS     R6,R0,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \   00000148   0x0430             LSLS     R0,R6,#+16
   \   0000014A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000014E   0x4964             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000150   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000152   0x220C             MOVS     R2,#+12
   \   00000154   0xFB02 0x1104      MLA      R1,R2,R4,R1
   \   00000158   0x6048             STR      R0,[R1, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \   0000015A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000015C   0x2C00             CMP      R4,#+0
   \   0000015E   0xD104             BNE.N    ??LPLD_FlexBus_Init_9
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \   00000160   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000164   0x495F             LDR.N    R1,??LPLD_FlexBus_Init_1+0x8  ;; 0x4004c004
   \   00000166   0x6008             STR      R0,[R1, #+0]
   \   00000168   0xE05E             B.N      ??LPLD_FlexBus_Init_10
     99            }
    100            else if(Fbx == FB1)
   \                     ??LPLD_FlexBus_Init_9: (+1)
   \   0000016A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000016C   0x2C01             CMP      R4,#+1
   \   0000016E   0xD110             BNE.N    ??LPLD_FlexBus_Init_11
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \   00000170   0x485D             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000172   0x6800             LDR      R0,[R0, #+0]
   \   00000174   0x0100             LSLS     R0,R0,#+4        ;; ZeroExtS R0,R0,#+4,#+4
   \   00000176   0x0900             LSRS     R0,R0,#+4
   \   00000178   0x495B             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000017A   0x6008             STR      R0,[R1, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \   0000017C   0x485A             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000017E   0x6800             LDR      R0,[R0, #+0]
   \   00000180   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000184   0x4958             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000186   0x6008             STR      R0,[R1, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \   00000188   0xF44F 0x60A0      MOV      R0,#+1280
   \   0000018C   0x4957             LDR.N    R1,??LPLD_FlexBus_Init_1+0x10  ;; 0x4004c000
   \   0000018E   0x6008             STR      R0,[R1, #+0]
   \   00000190   0xE04A             B.N      ??LPLD_FlexBus_Init_10
    105            }
    106            else if(Fbx == FB2)
   \                     ??LPLD_FlexBus_Init_11: (+1)
   \   00000192   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000194   0x2C02             CMP      R4,#+2
   \   00000196   0xD110             BNE.N    ??LPLD_FlexBus_Init_12
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \   00000198   0x4853             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   000001A0   0x4951             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001A2   0x6008             STR      R0,[R1, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \   000001A4   0x4850             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001A6   0x6800             LDR      R0,[R0, #+0]
   \   000001A8   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   000001AC   0x494E             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001AE   0x6008             STR      R0,[R1, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \   000001B0   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001B4   0x494E             LDR.N    R1,??LPLD_FlexBus_Init_1+0x14  ;; 0x4004b048
   \   000001B6   0x6008             STR      R0,[R1, #+0]
   \   000001B8   0xE036             B.N      ??LPLD_FlexBus_Init_10
    111            }
    112            else if(Fbx == FB3)
   \                     ??LPLD_FlexBus_Init_12: (+1)
   \   000001BA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001BC   0x2C03             CMP      R4,#+3
   \   000001BE   0xD110             BNE.N    ??LPLD_FlexBus_Init_13
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \   000001C0   0x4849             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001C2   0x6800             LDR      R0,[R0, #+0]
   \   000001C4   0xF430 0x4070      BICS     R0,R0,#0xF000
   \   000001C8   0x4947             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001CA   0x6008             STR      R0,[R1, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \   000001CC   0x4846             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001CE   0x6800             LDR      R0,[R0, #+0]
   \   000001D0   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000001D4   0x4944             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001D6   0x6008             STR      R0,[R1, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \   000001D8   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001DC   0x4945             LDR.N    R1,??LPLD_FlexBus_Init_1+0x18  ;; 0x4004b04c
   \   000001DE   0x6008             STR      R0,[R1, #+0]
   \   000001E0   0xE022             B.N      ??LPLD_FlexBus_Init_10
    117            }
    118            else if(Fbx == FB4)
   \                     ??LPLD_FlexBus_Init_13: (+1)
   \   000001E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E4   0x2C04             CMP      R4,#+4
   \   000001E6   0xD10E             BNE.N    ??LPLD_FlexBus_Init_14
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \   000001E8   0x483F             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001EA   0x6800             LDR      R0,[R0, #+0]
   \   000001EC   0xF030 0x6070      BICS     R0,R0,#0xF000000
   \   000001F0   0x493D             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001F2   0x6008             STR      R0,[R1, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \   000001F4   0x483C             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001F6   0x6800             LDR      R0,[R0, #+0]
   \   000001F8   0x493B             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001FA   0x6008             STR      R0,[R1, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \   000001FC   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000200   0x493D             LDR.N    R1,??LPLD_FlexBus_Init_1+0x1C  ;; 0x4004b044
   \   00000202   0x6008             STR      R0,[R1, #+0]
   \   00000204   0xE010             B.N      ??LPLD_FlexBus_Init_10
    123            }
    124            else if(Fbx == FB5)
   \                     ??LPLD_FlexBus_Init_14: (+1)
   \   00000206   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000208   0x2C05             CMP      R4,#+5
   \   0000020A   0xD10D             BNE.N    ??LPLD_FlexBus_Init_10
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \   0000020C   0x4836             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000020E   0x6800             LDR      R0,[R0, #+0]
   \   00000210   0xF430 0x0070      BICS     R0,R0,#0xF00000
   \   00000214   0x4934             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000216   0x6008             STR      R0,[R1, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \   00000218   0x4833             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000021A   0x6800             LDR      R0,[R0, #+0]
   \   0000021C   0x4932             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000021E   0x6008             STR      R0,[R1, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \   00000220   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000224   0x4935             LDR.N    R1,??LPLD_FlexBus_Init_1+0x20  ;; 0x4004b040
   \   00000226   0x6008             STR      R0,[R1, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??LPLD_FlexBus_Init_10: (+1)
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0xE007             B.N      ??LPLD_FlexBus_Init_15
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_16: (+1)
   \   0000022C   0x4934             LDR.N    R1,??LPLD_FlexBus_Init_1+0x24
   \   0000022E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000230   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
    136              *pcr = PORT_PCR_MUX(5);    
   \   00000234   0xF44F 0x62A0      MOV      R2,#+1280
   \   00000238   0x600A             STR      R2,[R1, #+0]
    137            }
   \   0000023A   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_FlexBus_Init_15: (+1)
   \   0000023C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000023E   0x2810             CMP      R0,#+16
   \   00000240   0xDBF4             BLT.N    ??LPLD_FlexBus_Init_16
    138            //使能其余的地址总线
    139            n=16;
   \   00000242   0x2010             MOVS     R0,#+16
    140            for(uint8 i=0; i<16; i++)
   \   00000244   0x2200             MOVS     R2,#+0
   \   00000246   0xE00C             B.N      ??LPLD_FlexBus_Init_17
    141            {
    142              if((addr_space>>i)&0x01)
   \                     ??LPLD_FlexBus_Init_18: (+1)
   \   00000248   0x0031             MOVS     R1,R6
   \   0000024A   0x40D1             LSRS     R1,R1,R2
   \   0000024C   0x07C9             LSLS     R1,R1,#+31
   \   0000024E   0xD507             BPL.N    ??LPLD_FlexBus_Init_19
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \   00000250   0x492B             LDR.N    R1,??LPLD_FlexBus_Init_1+0x24
   \   00000252   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000254   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000258   0x1C40             ADDS     R0,R0,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \   0000025A   0xF44F 0x63A0      MOV      R3,#+1280
   \   0000025E   0x600B             STR      R3,[R1, #+0]
    146              }
    147            }
   \                     ??LPLD_FlexBus_Init_19: (+1)
   \   00000260   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_FlexBus_Init_17: (+1)
   \   00000262   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000264   0x2A10             CMP      R2,#+16
   \   00000266   0xDBEF             BLT.N    ??LPLD_FlexBus_Init_18
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \   00000268   0x2000             MOVS     R0,#+0
    150            if(size == 0)
   \   0000026A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000026C   0x2F00             CMP      R7,#+0
   \   0000026E   0xD101             BNE.N    ??LPLD_FlexBus_Init_20
    151            {   
    152              n=16;
   \   00000270   0x2010             MOVS     R0,#+16
   \   00000272   0xE012             B.N      ??LPLD_FlexBus_Init_21
    153            }else if(justied==0 && size == 0x10)
   \                     ??LPLD_FlexBus_Init_20: (+1)
   \   00000274   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000278   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000027C   0xD104             BNE.N    ??LPLD_FlexBus_Init_22
   \   0000027E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000280   0x2F10             CMP      R7,#+16
   \   00000282   0xD101             BNE.N    ??LPLD_FlexBus_Init_22
    154            {
    155              n=16;
   \   00000284   0x2010             MOVS     R0,#+16
   \   00000286   0xE008             B.N      ??LPLD_FlexBus_Init_21
    156            }else if(justied==0 && size == 0x01)
   \                     ??LPLD_FlexBus_Init_22: (+1)
   \   00000288   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000028C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000290   0xD103             BNE.N    ??LPLD_FlexBus_Init_21
   \   00000292   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000294   0x2F01             CMP      R7,#+1
   \   00000296   0xD100             BNE.N    ??LPLD_FlexBus_Init_21
    157            {
    158              n=8;
   \   00000298   0x2008             MOVS     R0,#+8
    159            }
    160            if(n!=0)
   \                     ??LPLD_FlexBus_Init_21: (+1)
   \   0000029A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000029C   0x2800             CMP      R0,#+0
   \   0000029E   0xD00F             BEQ.N    ??LPLD_FlexBus_Init_23
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \   000002A0   0x221F             MOVS     R2,#+31
   \   000002A2   0xE007             B.N      ??LPLD_FlexBus_Init_24
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_25: (+1)
   \   000002A4   0x4916             LDR.N    R1,??LPLD_FlexBus_Init_1+0x24
   \   000002A6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002A8   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
    165                *pcr = PORT_PCR_MUX(5);    
   \   000002AC   0xF44F 0x63A0      MOV      R3,#+1280
   \   000002B0   0x600B             STR      R3,[R1, #+0]
    166              }
   \   000002B2   0x1E52             SUBS     R2,R2,#+1
   \                     ??LPLD_FlexBus_Init_24: (+1)
   \   000002B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002B6   0xF1D0 0x011F      RSBS     R1,R0,#+31
   \   000002BA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002BC   0x4291             CMP      R1,R2
   \   000002BE   0xDBF1             BLT.N    ??LPLD_FlexBus_Init_25
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??LPLD_FlexBus_Init_23: (+1)
   \   000002C0   0xF44F 0x60A0      MOV      R0,#+1280
   \   000002C4   0x490F             LDR.N    R1,??LPLD_FlexBus_Init_1+0x28  ;; 0x4004a04c
   \   000002C6   0x6008             STR      R0,[R1, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \   000002C8   0xF44F 0x60A0      MOV      R0,#+1280
   \   000002CC   0x490E             LDR.N    R1,??LPLD_FlexBus_Init_1+0x2C  ;; 0x4004b02c
   \   000002CE   0x6008             STR      R0,[R1, #+0]
    172                        
    173            return 1;
   \   000002D0   0x2001             MOVS     R0,#+1
   \   000002D2   0xE8BD 0x0FF2      POP      {R1,R4-R11}
   \   000002D6   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \   000002DA   0xBF00             Nop      
   \                     ??LPLD_FlexBus_Init_1:
   \   000002DC   0x........         DC32     ?_0
   \   000002E0   0x4000C000         DC32     0x4000c000
   \   000002E4   0x4004C004         DC32     0x4004c004
   \   000002E8   0x4000C060         DC32     0x4000c060
   \   000002EC   0x4004C000         DC32     0x4004c000
   \   000002F0   0x4004B048         DC32     0x4004b048
   \   000002F4   0x4004B04C         DC32     0x4004b04c
   \   000002F8   0x4004B044         DC32     0x4004b044
   \   000002FC   0x4004B040         DC32     0x4004b040
   \   00000300   0x........         DC32     FB_PORT
   \   00000304   0x4004A04C         DC32     0x4004a04c
   \   00000308   0x4004B02C         DC32     0x4004b02c
    174          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x47 0x3A          DC8 47H, 3AH, 5CH, 73H, 74H, 75H, 64H, 79H
   \              0x5C 0x73    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x63          DC8 5CH, 63H, 61H, 72H, 5CH, 70H, 72H, 6FH
   \              0x61 0x72    
   \              0x5C 0x70    
   \              0x72 0x6F    
   \   00000010   0x67 0x72          DC8 67H, 72H, 61H, 6DH, 5CH, 6CH, 69H, 62H
   \              0x61 0x6D    
   \              0x5C 0x6C    
   \              0x69 0x62    
   \   00000018   0x5F 0x61          DC8 5FH, 61H, 6EH, 64H, 5FH, 65H, 78H, 61H
   \              0x6E 0x64    
   \              0x5F 0x65    
   \              0x78 0x61    
   \   00000020   0x6D 0x70          DC8 6DH, 70H, 6CH, 65H, 5CH, 4CH, 50H, 4CH
   \              0x6C 0x65    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \   00000028   0x44 0x5F          DC8 44H, 5FH, 4FH, 53H, 4BH, 69H, 6EH, 65H
   \              0x4F 0x53    
   \              0x4B 0x69    
   \              0x6E 0x65    
   \   00000030   0x74 0x69          DC8 74H, 69H, 73H, 5FH, 56H, 33H, 5CH, 6CH
   \              0x73 0x5F    
   \              0x56 0x33    
   \              0x5C 0x6C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 5CH, 4CH, 50H, 4CH, 44H, 5CH
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \              0x44 0x5C    
   \   00000040   0x48 0x57          DC8 48H, 57H, 5CH, 48H, 57H, 5FH, 46H, 4CH
   \              0x5C 0x48    
   \              0x57 0x5F    
   \              0x46 0x4C    
   \   00000048   0x45 0x58          DC8 45H, 58H, 42H, 55H, 53H, 2EH, 63H, 0
   \              0x42 0x55    
   \              0x53 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   LPLD_FlexBus_Init
        56   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      80  ?_0
     128  FB_PORT
     780  LPLD_FlexBus_Init

 
 128 bytes in section .data
  80 bytes in section .rodata
 780 bytes in section .text
 
 780 bytes of CODE  memory
  80 bytes of CONST memory
 128 bytes of DATA  memory

Errors: none
Warnings: none
