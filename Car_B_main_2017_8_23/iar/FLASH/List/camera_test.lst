###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       23/Aug/2017  10:34:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\app\camera_test.c
#    Command line =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\app\camera_test.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\List
#        -lB
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\List
#        -o
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR Systems\Embedded
#        Workbench 7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\app\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\CPU\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\FatFs\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\List\camera_test.lst
#    Object file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\iar\FLASH\Obj\camera_test.o
#
###############################################################################

G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_B_main_2017_8_23\app\camera_test.c
      1          
      2          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable7  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable7_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
      3          #include "camera_test.h"
      4          #include "timer.h"
      5          #include "Freecars.h"
      6          
      7          #define title1_received 0xFA
      8          #define title2_received 0xFF
      9          #define title3_received 0x0C
     10          #define title4_received 0xFC

   \                                 In section .bss, align 1
     11          uint8 bzx;
   \                     bzx:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          uint8 bzy;
   \                     bzy:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     13          uint8 bz_nopoint;
   \                     bz_nopoint:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     14          uint32 bz_turn_pwm;
   \                     bz_turn_pwm:
   \   00000000                      DS8 4
     15          

   \                                 In section .bss, align 4
     16          unsigned char Image1[ROW][COLUMN];
   \                     Image1:
   \   00000000                      DS8 43200

   \                                 In section .bss, align 4
     17          unsigned char Image2[ROW][COLUMN];
   \                     Image2:
   \   00000000                      DS8 43200

   \                                 In section .bss, align 1
     18          uint8 end_flag=0; 
   \                     end_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     19          uint8 start_flag=0;
   \                     start_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     20          uint8 row=0;
   \                     row:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     21          uint8 lock=0;
   \                     lock:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     22          uint8 WhichBuffer = 1;
   \                     WhichBuffer:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 1
     23          uint8 setvalue=80;//亮点亮度阈值
   \                     setvalue:
   \   00000000   0x50               DC8 80

   \                                 In section .bss, align 1
     24          uint8 rowAdr,NOpoint,real_pointx,real_pointy,pre_pointx;
   \                     rowAdr:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     NOpoint:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     real_pointx:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     real_pointy:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     pre_pointx:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     25          uint8 last_nopoint=1;
   \                     last_nopoint:
   \   00000000   0x01               DC8 1

   \                                 In section .text, align 2, keep-with-next
     26          void camera_init(void)
     27          {
   \                     camera_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     28            static GPIO_InitTypeDef dmaReq_port_struct;
     29            dmaReq_port_struct.GPIO_PTx = PTB;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x400ff040
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     30            dmaReq_port_struct.GPIO_Pins = GPIO_Pin22;
   \   0000000E   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000016   0x6048             STR      R0,[R1, #+4]
     31            dmaReq_port_struct.GPIO_Dir = DIR_INPUT;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000001E   0x7308             STRB     R0,[R1, #+12]
     32            dmaReq_port_struct.GPIO_PinControl =IRQC_DMAFA | INPUT_PULL_UP;//下降沿产生DMA请求,输入上拉
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x20003
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000028   0x6088             STR      R0,[R1, #+8]
     33            LPLD_GPIO_Init(dmaReq_port_struct);
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   0000002E   0xB084             SUB      SP,SP,#+16
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x2214             MOVS     R2,#+20
   \   00000034   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000038   0xBC0F             POP      {R0-R3}
   \   0000003A   0x.... 0x....      BL       LPLD_GPIO_Init
     34            
     35            static GPIO_InitTypeDef href_port_struct;  //行中断接受端口
     36            href_port_struct.GPIO_PTx = PTB;    
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x400ff040
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000046   0x6008             STR      R0,[R1, #+0]
     37            href_port_struct.GPIO_Pins = GPIO_Pin20;   
   \   00000048   0xF45F 0x1080      MOVS     R0,#+1048576
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000050   0x6048             STR      R0,[R1, #+4]
     38            href_port_struct.GPIO_Dir = DIR_INPUT;        //输入
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000058   0x7308             STRB     R0,[R1, #+12]
     39            href_port_struct.GPIO_PinControl = IRQC_RI|INPUT_PULL_UP|INPUT_PF_EN;  //内部上拉|下降沿中断
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable7_6  ;; 0x90013
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000062   0x6088             STR      R0,[R1, #+8]
     40            href_port_struct.GPIO_Isr = portb_isr;        //中断函数
   \   00000064   0x.... 0x....      ADR.W    R0,portb_isr
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000006C   0x6108             STR      R0,[R1, #+16]
     41            LPLD_GPIO_Init(href_port_struct);
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000072   0xB084             SUB      SP,SP,#+16
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007C   0xBC0F             POP      {R0-R3}
   \   0000007E   0x.... 0x....      BL       LPLD_GPIO_Init
     42            LPLD_GPIO_EnableIrq(href_port_struct);
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000086   0xB084             SUB      SP,SP,#+16
   \   00000088   0x4668             MOV      R0,SP
   \   0000008A   0x2214             MOVS     R2,#+20
   \   0000008C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000090   0xBC0F             POP      {R0-R3}
   \   00000092   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     43            
     44            static GPIO_InitTypeDef vsync_port_struct;  //场中断接受端口
     45            vsync_port_struct.GPIO_PTx = PTB;    
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x400ff040
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   0000009E   0x6008             STR      R0,[R1, #+0]
     46            vsync_port_struct.GPIO_Pins = GPIO_Pin23;   
   \   000000A0   0xF45F 0x0000      MOVS     R0,#+8388608
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000A8   0x6048             STR      R0,[R1, #+4]
     47            vsync_port_struct.GPIO_Dir = DIR_INPUT;        //输入
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000B0   0x7308             STRB     R0,[R1, #+12]
     48            vsync_port_struct.GPIO_PinControl = IRQC_RI|INPUT_PULL_UP|INPUT_PF_EN;    //内部上拉|下降沿中断
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable7_6  ;; 0x90013
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000BA   0x6088             STR      R0,[R1, #+8]
     49            vsync_port_struct.GPIO_Isr = portb_isr;        //中断函数
   \   000000BC   0x.... 0x....      ADR.W    R0,portb_isr
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000C4   0x6108             STR      R0,[R1, #+16]
     50            LPLD_GPIO_Init(vsync_port_struct);
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000CA   0xB084             SUB      SP,SP,#+16
   \   000000CC   0x4668             MOV      R0,SP
   \   000000CE   0x2214             MOVS     R2,#+20
   \   000000D0   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000D4   0xBC0F             POP      {R0-R3}
   \   000000D6   0x.... 0x....      BL       LPLD_GPIO_Init
     51            LPLD_GPIO_EnableIrq(vsync_port_struct);
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000000DE   0xB084             SUB      SP,SP,#+16
   \   000000E0   0x4668             MOV      R0,SP
   \   000000E2   0x2214             MOVS     R2,#+20
   \   000000E4   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000E8   0xBC0F             POP      {R0-R3}
   \   000000EA   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     52            
     53            //摄像头到单片机数据口初始化：PTC0~PTC7
     54            static GPIO_InitTypeDef data_port_struct;
     55            data_port_struct.GPIO_PTx = PTC;
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable7_8  ;; 0x400ff080
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000000F6   0x6008             STR      R0,[R1, #+0]
     56            data_port_struct.GPIO_Dir = DIR_INPUT;
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000000FE   0x7308             STRB     R0,[R1, #+12]
     57            data_port_struct.GPIO_Pins = GPIO_Pin0_7;
   \   00000100   0x20FF             MOVS     R0,#+255
   \   00000102   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000106   0x6048             STR      R0,[R1, #+4]
     58            data_port_struct.GPIO_PinControl = IRQC_DIS|INPUT_PULL_DIS;
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   0000010E   0x6088             STR      R0,[R1, #+8]
     59            LPLD_GPIO_Init(data_port_struct);
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000114   0xB084             SUB      SP,SP,#+16
   \   00000116   0x4668             MOV      R0,SP
   \   00000118   0x2214             MOVS     R2,#+20
   \   0000011A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000011E   0xBC0F             POP      {R0-R3}
   \   00000120   0x.... 0x....      BL       LPLD_GPIO_Init
     60            
     61            //DMA参数配置
     62            static DMA_InitTypeDef  dma_init_struct;
     63            dma_init_struct.DMA_CHx = DMA_CH0;    //CH0通道
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000012A   0x7008             STRB     R0,[R1, #+0]
     64            dma_init_struct.DMA_Req = PORTB_DMAREQ;     //PORTB22为请求源
   \   0000012C   0x2032             MOVS     R0,#+50
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   00000132   0x7048             STRB     R0,[R1, #+1]
     65            dma_init_struct.DMA_MajorLoopCnt = COLUMN;   //主循环计数值：行采集点数，宽度
   \   00000134   0x20B4             MOVS     R0,#+180
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000013A   0x8088             STRH     R0,[R1, #+4]
     66            dma_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次传输1字节
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   00000142   0x6088             STR      R0,[R1, #+8]
     67            dma_init_struct.DMA_SourceAddr = (uint32)&PTC->PDIR; //源地址：PTC0-PTC7,Port Data Input Register
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable7_11  ;; 0x400ff090
   \   00000148   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000014C   0x60C8             STR      R0,[R1, #+12]
     68            dma_init_struct.DMA_DestAddr = (uint32)Image1;      //目的地址：存放图像的数组
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable7_12
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   00000156   0x6188             STR      R0,[R1, #+24]
     69            dma_init_struct.DMA_DestAddrOffset = 1;       //目的地址偏移：每次读入增加1
   \   00000158   0x2001             MOVS     R0,#+1
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000015E   0x83C8             STRH     R0,[R1, #+30]
     70            dma_init_struct.DMA_AutoDisableReq = TRUE;    //自动禁用请求，使能后通道请求将在主循环结束后禁用
   \   00000160   0x2001             MOVS     R0,#+1
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   00000166   0xF881 0x0024      STRB     R0,[R1, #+36]
     71            LPLD_DMA_Init(dma_init_struct);//初始化但未使能
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   0000016E   0xB084             SUB      SP,SP,#+16
   \   00000170   0x4668             MOV      R0,SP
   \   00000172   0x222C             MOVS     R2,#+44
   \   00000174   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000178   0xBC0F             POP      {R0-R3}
   \   0000017A   0x.... 0x....      BL       LPLD_DMA_Init
     72            
     73            static UART_InitTypeDef uart4_init_struct;
     74            uart4_init_struct.UART_Uartx = UART4; //UART4 用于与电脑通信           
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable7_13  ;; 0x400ea000
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   00000186   0x6008             STR      R0,[R1, #+0]
     75            uart4_init_struct.UART_BaudRate = 115200;
   \   00000188   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   00000190   0x6048             STR      R0,[R1, #+4]
     76            uart4_init_struct.UART_TxPin = PTE24;//发送引脚为PTE24
   \   00000192   0x2094             MOVS     R0,#+148
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   00000198   0x7208             STRB     R0,[R1, #+8]
     77            uart4_init_struct.UART_RxPin = PTE25;//接收引脚为PTE25
   \   0000019A   0x2095             MOVS     R0,#+149
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   000001A0   0x7248             STRB     R0,[R1, #+9]
     78            uart4_init_struct.UART_RxIntEnable=TRUE;//使能接受中断
   \   000001A2   0x2001             MOVS     R0,#+1
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   000001A8   0x7288             STRB     R0,[R1, #+10]
     79            uart4_init_struct.UART_RxIsr=uart4_isr;
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   000001B2   0x6148             STR      R0,[R1, #+20]
     80            LPLD_UART_EnableIrq(uart4_init_struct);//中断使能
   \   000001B4   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   000001B8   0xB084             SUB      SP,SP,#+16
   \   000001BA   0x4668             MOV      R0,SP
   \   000001BC   0x221C             MOVS     R2,#+28
   \   000001BE   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001C2   0xBC0F             POP      {R0-R3}
   \   000001C4   0x.... 0x....      BL       LPLD_UART_EnableIrq
     81            LPLD_UART_Init(uart4_init_struct); //初始化UART
   \   000001C8   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   000001CC   0xB084             SUB      SP,SP,#+16
   \   000001CE   0x4668             MOV      R0,SP
   \   000001D0   0x221C             MOVS     R2,#+28
   \   000001D2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001D6   0xBC0F             POP      {R0-R3}
   \   000001D8   0x.... 0x....      BL       LPLD_UART_Init
     82            
     83            static UART_InitTypeDef uart3_init_struct;
     84            uart3_init_struct.UART_Uartx = UART3; //UART4 用于与电脑通信           
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable7_16  ;; 0x4006d000
   \   000001E0   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   000001E4   0x6008             STR      R0,[R1, #+0]
     85            uart3_init_struct.UART_BaudRate = 115200;
   \   000001E6   0xF45F 0x30E1      MOVS     R0,#+115200
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   000001EE   0x6048             STR      R0,[R1, #+4]
     86            uart3_init_struct.UART_TxPin = PTB11;//发送引脚为PTE24
   \   000001F0   0x202B             MOVS     R0,#+43
   \   000001F2   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   000001F6   0x7208             STRB     R0,[R1, #+8]
     87            uart3_init_struct.UART_RxPin = PTB10;//接收引脚为PTE25
   \   000001F8   0x202A             MOVS     R0,#+42
   \   000001FA   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   000001FE   0x7248             STRB     R0,[R1, #+9]
     88            uart3_init_struct.UART_RxIntEnable=TRUE;//使能接受中断
   \   00000200   0x2001             MOVS     R0,#+1
   \   00000202   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   00000206   0x7288             STRB     R0,[R1, #+10]
     89            uart3_init_struct.UART_RxIsr=uart3_isr;
   \   00000208   0x.... 0x....      ADR.W    R0,uart3_isr
   \   0000020C   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   00000210   0x6148             STR      R0,[R1, #+20]
     90            LPLD_UART_EnableIrq(uart3_init_struct);//中断使能
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   00000216   0xB084             SUB      SP,SP,#+16
   \   00000218   0x4668             MOV      R0,SP
   \   0000021A   0x221C             MOVS     R2,#+28
   \   0000021C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000220   0xBC0F             POP      {R0-R3}
   \   00000222   0x.... 0x....      BL       LPLD_UART_EnableIrq
     91            LPLD_UART_Init(uart3_init_struct); //初始化UART
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   0000022A   0xB084             SUB      SP,SP,#+16
   \   0000022C   0x4668             MOV      R0,SP
   \   0000022E   0x221C             MOVS     R2,#+28
   \   00000230   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000234   0xBC0F             POP      {R0-R3}
   \   00000236   0x.... 0x....      BL       LPLD_UART_Init
     92            
     93            
     94            
     95            static UART_InitTypeDef uart0_init_struct;
     96            uart0_init_struct.UART_Uartx = UART0; //UART0用于设置摄像头
   \   0000023A   0x.... 0x....      LDR.W    R0,??DataTable7_18  ;; 0x4006a000
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   00000242   0x6008             STR      R0,[R1, #+0]
     97            uart0_init_struct.UART_BaudRate = 115200; 
   \   00000244   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   0000024C   0x6048             STR      R0,[R1, #+4]
     98            uart0_init_struct.UART_RxPin = PTB16;  //接收引脚为PTB16
   \   0000024E   0x2030             MOVS     R0,#+48
   \   00000250   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   00000254   0x7248             STRB     R0,[R1, #+9]
     99            uart0_init_struct.UART_TxPin = PTB17;  //发送引脚为PTB17
   \   00000256   0x2031             MOVS     R0,#+49
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   0000025C   0x7208             STRB     R0,[R1, #+8]
    100            LPLD_UART_Init(uart0_init_struct); //初始化UART
   \   0000025E   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   00000262   0xB084             SUB      SP,SP,#+16
   \   00000264   0x4668             MOV      R0,SP
   \   00000266   0x221C             MOVS     R2,#+28
   \   00000268   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000026C   0xBC0F             POP      {R0-R3}
   \   0000026E   0x.... 0x....      BL       LPLD_UART_Init
    101            
    102            MT9V032_CFG_init();//MT9V032设置
   \   00000272   0x.... 0x....      BL       MT9V032_CFG_init
    103          }
   \   00000276   0xB007             ADD      SP,SP,#+28
   \   00000278   0xBD00             POP      {PC}             ;; return

   \                                 In section .bss, align 4
   \                     ??dmaReq_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??href_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??vsync_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??data_port_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
   \                     ??dma_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
   \                     ??uart4_init_struct:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
   \                     ??uart3_init_struct:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
   \                     ??uart0_init_struct:
   \   00000000                      DS8 28
    104          

   \                                 In section .text, align 4, keep-with-next
    105          void uart3_isr(void)//串口3接收中断服务程序
    106          {
   \                     uart3_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    107             uint8 RxBuffer[7];//接受缓存
    108            /*三个数 pointx 1字节 pointy 1字节 turn_pwm 4字节 */
    109            static uint8 data_len = 0,data_cnt = 0;//数据长度，数据数组下标
    110            static uint8 RxState=0;//接收状态
    111            static uint8 RxData;
    112            uint8 i;
    113            RxData=LPLD_UART_GetChar(UART3);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7_16  ;; 0x4006d000
   \   00000008   0x.... 0x....      BL       LPLD_UART_GetChar
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable7_20
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    114            if(RxState == 0 &&  RxData == title1_received)//帧头1
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD109             BNE.N    ??uart3_isr_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x28FA             CMP      R0,#+250
   \   00000024   0xD104             BNE.N    ??uart3_isr_0
    115            {
    116              RxState = 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable7_21
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
   \   0000002E   0xE080             B.N      ??uart3_isr_1
    117            }
    118            else if(RxState == 1 &&  RxData == title2_received)//帧头2
   \                     ??uart3_isr_0: (+1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD111             BNE.N    ??uart3_isr_2
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x28FF             CMP      R0,#+255
   \   00000042   0xD10C             BNE.N    ??uart3_isr_2
    119            {
    120              RxState = 2;
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable7_21
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    121              data_len = 7;
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable7_22
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    122              data_cnt = 0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable7_23
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
   \   0000005C   0xE069             B.N      ??uart3_isr_1
    123            }
    124            else if(RxState == 2 && data_len>0)
   \                     ??uart3_isr_2: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xD124             BNE.N    ??uart3_isr_3
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable7_22
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD01F             BEQ.N    ??uart3_isr_3
    125            {
    126              data_len--;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable7_22
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x1E40             SUBS     R0,R0,#+1
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable7_22
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    127              RxBuffer[data_cnt++]=RxData;//接收数据
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable7_23
   \   0000008C   0x7812             LDRB     R2,[R2, #+0]
   \   0000008E   0x5450             STRB     R0,[R2, R1]
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable7_23
   \   00000094   0x7800             LDRB     R0,[R0, #+0]
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable7_23
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    128              if(data_len==0)
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable7_22
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD144             BNE.N    ??uart3_isr_1
    129                RxState=3;
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable7_21
   \   000000AE   0x7008             STRB     R0,[R1, #+0]
   \   000000B0   0xE03F             B.N      ??uart3_isr_1
    130            }
    131            else if(RxState == 3 &&  RxData == title3_received)//帧尾1
   \                     ??uart3_isr_3: (+1)
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x2803             CMP      R0,#+3
   \   000000BA   0xD109             BNE.N    ??uart3_isr_4
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0x280C             CMP      R0,#+12
   \   000000C4   0xD104             BNE.N    ??uart3_isr_4
    132            {
    133              RxState = 4;
   \   000000C6   0x2004             MOVS     R0,#+4
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable7_21
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
   \   000000CE   0xE030             B.N      ??uart3_isr_1
    134            }
    135            else if(RxState == 4 &&  RxData == title4_received)//帧尾2
   \                     ??uart3_isr_4: (+1)
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0x2804             CMP      R0,#+4
   \   000000D8   0xD127             BNE.N    ??uart3_isr_5
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   000000DE   0x7800             LDRB     R0,[R0, #+0]
   \   000000E0   0x28FC             CMP      R0,#+252
   \   000000E2   0xD122             BNE.N    ??uart3_isr_5
    136            {
    137              RxState=0;
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable7_21
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
    138              
    139              bzx=RxBuffer[0];
   \   000000EC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable7_24
   \   000000F4   0x7008             STRB     R0,[R1, #+0]
    140              bzy=RxBuffer[1];
   \   000000F6   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable7_25
   \   000000FE   0x7008             STRB     R0,[R1, #+0]
    141              for(i = 2; i < 6; i++)
   \   00000100   0x2002             MOVS     R0,#+2
   \   00000102   0xE009             B.N      ??uart3_isr_6
    142              {
    143                (*( (char *)(&bz_turn_pwm) + i-2)) = RxBuffer[i];
   \                     ??uart3_isr_7: (+1)
   \   00000104   0x4669             MOV      R1,SP
   \   00000106   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000108   0x5C41             LDRB     R1,[R0, R1]
   \   0000010A   0x.... 0x....      LDR.W    R2,??DataTable7_26
   \   0000010E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000110   0x1882             ADDS     R2,R0,R2
   \   00000112   0xF802 0x1C02      STRB     R1,[R2, #-2]
    144              }
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \                     ??uart3_isr_6: (+1)
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x2806             CMP      R0,#+6
   \   0000011C   0xDBF2             BLT.N    ??uart3_isr_7
    145              bz_nopoint=RxBuffer[6];
   \   0000011E   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable7_27
   \   00000126   0x7008             STRB     R0,[R1, #+0]
   \   00000128   0xE003             B.N      ??uart3_isr_1
    146              
    147            }
    148            else 
    149              RxState=0;
   \                     ??uart3_isr_5: (+1)
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable7_21
   \   00000130   0x7008             STRB     R0,[R1, #+0]
    150          }
   \                     ??uart3_isr_1: (+1)
   \   00000132   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .bss, align 1
   \                     ??data_len:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??data_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??RxState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??RxData:
   \   00000000                      DS8 1
    151          
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void picture_send(void)
    154          {
   \                     picture_send: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    155            int i,j;
    156              if(end_flag)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_28
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD033             BEQ.N    ??picture_send_0
    157              {
    158                disable_irq(PORTB_IRQn); 
   \   0000000C   0x2058             MOVS     R0,#+88
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
    159                LPLD_UART_PutChar(UART4,0X01);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable7_13  ;; 0x400ea000
   \   00000018   0x.... 0x....      BL       LPLD_UART_PutChar
    160                LPLD_UART_PutChar(UART4,0XFE);
   \   0000001C   0xF07F 0x0101      MVNS     R1,#+1
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable7_13  ;; 0x400ea000
   \   00000024   0x.... 0x....      BL       LPLD_UART_PutChar
    161                for(i=0;i<ROWnum;i++)
   \   00000028   0x2400             MOVS     R4,#+0
   \   0000002A   0xE00F             B.N      ??picture_send_1
    162                  for(j=0;j<COLUMN;j++)
    163                      LPLD_UART_PutChar(UART4,Image1[i][j]);
   \                     ??picture_send_2: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable7_12
   \   00000030   0x21B4             MOVS     R1,#+180
   \   00000032   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000036   0x5628             LDRSB    R0,[R5, R0]
   \   00000038   0x0001             MOVS     R1,R0
   \   0000003A   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable7_13  ;; 0x400ea000
   \   00000040   0x.... 0x....      BL       LPLD_UART_PutChar
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \                     ??picture_send_3: (+1)
   \   00000046   0x2DB4             CMP      R5,#+180
   \   00000048   0xDBF0             BLT.N    ??picture_send_2
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
   \                     ??picture_send_1: (+1)
   \   0000004C   0x2C5A             CMP      R4,#+90
   \   0000004E   0xDA01             BGE.N    ??picture_send_4
   \   00000050   0x2500             MOVS     R5,#+0
   \   00000052   0xE7F8             B.N      ??picture_send_3
    164                LPLD_UART_PutChar(UART4,0XFE);
   \                     ??picture_send_4: (+1)
   \   00000054   0xF07F 0x0101      MVNS     R1,#+1
   \   00000058   0x....             LDR.N    R0,??DataTable7_13  ;; 0x400ea000
   \   0000005A   0x.... 0x....      BL       LPLD_UART_PutChar
    165                LPLD_UART_PutChar(UART4,0X01);
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0x....             LDR.N    R0,??DataTable7_13  ;; 0x400ea000
   \   00000062   0x.... 0x....      BL       LPLD_UART_PutChar
    166                enable_irq(PORTB_IRQn);
   \   00000066   0x2058             MOVS     R0,#+88
   \   00000068   0x.... 0x....      BL       NVIC_EnableIRQ
    167                end_flag=0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable7_28
   \   00000072   0x7008             STRB     R0,[R1, #+0]
    168              }
    169          }
   \                     ??picture_send_0: (+1)
   \   00000074   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    170          
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void MT9V032_CFG_init(void)
    173          {
   \                     MT9V032_CFG_init: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    174            uint16 i,light_time;
    175            uint8 MT9V032_CFG[8];//定义数据包
    176            my_delay(9999999);//延时以保证摄像头上面的51完成上电初始化
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7_29  ;; 0x98967f
   \   00000006   0x.... 0x....      BL       my_delay
    177            MT9V032_CFG[0] = 0xFF; //数据包帧头         
   \   0000000A   0x20FF             MOVS     R0,#+255
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    178            MT9V032_CFG[1] = 0x00; //命令位  
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
    179            switch(ROW) //分辨率选择位，不过列超过188后K60无法采集
    180            {
    181            case 480:MT9V032_CFG[2] = 8;break; //对应的分辨率为 480行）*188（列）
    182            case 240:MT9V032_CFG[2] = 9;break;//对应的分辨率为 240行）*188（列）
   \   00000016   0x2009             MOVS     R0,#+9
   \   00000018   0xF88D 0x0002      STRB     R0,[SP, #+2]
    183            case 120:MT9V032_CFG[2] = 10;break;//对应的分辨率为 120行）*188（列）
    184            default :MT9V032_CFG[2] = 10;break;
    185            }   
    186            MT9V032_CFG[3] = 100;  //fps一秒钟拍摄图像帧数设置，设置图像帧率.行数不同可设置的范围也不同,范围限制  120行的时候是1-200,240行的时候是1-132,480行的时候是1-66                  
   \   0000001C   0x2064             MOVS     R0,#+100
   \   0000001E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    187            //曝光时间越大图像越亮     由于最大曝光时间受到fps与分辨率的共同影响，这里不给出具体范围，可以直接把曝光设置为1000，摄像头上的51收到之后会根据分辨率及FPS计算最大曝光时间，然后把
    188            //曝光时间设置为最大曝光时间，并且会返回当前设置的最大曝光时间，这样就可以知道最大可以设置的曝光时间是多少了，然后觉得图像过亮，就可以在这个最大曝光值的基础上相应减少。
    189            light_time = 120; //可调
   \   00000022   0x2178             MOVS     R1,#+120
    190            MT9V032_CFG[4] = light_time>>8;          //曝光时间高八位   
   \   00000024   0x0008             MOVS     R0,R1
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   0x0A00             LSRS     R0,R0,#+8
   \   0000002A   0xF88D 0x0004      STRB     R0,[SP, #+4]
    191            MT9V032_CFG[5] = (uint8)light_time;      //曝光时间低八位  
   \   0000002E   0xF88D 0x1005      STRB     R1,[SP, #+5]
    192            MT9V032_CFG[6] = 0;    //设置自动曝光，0表示关闭
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF88D 0x0006      STRB     R0,[SP, #+6]
    193            MT9V032_CFG[7] = 0x5A;  //帧尾 
   \   00000038   0x205A             MOVS     R0,#+90
   \   0000003A   0xF88D 0x0007      STRB     R0,[SP, #+7]
    194            for(i=0;i<8;i++)
   \   0000003E   0x2400             MOVS     R4,#+0
   \   00000040   0xE008             B.N      ??MT9V032_CFG_init_0
    195            {
    196              LPLD_UART_PutChar(UART0,MT9V032_CFG[i]);
   \                     ??MT9V032_CFG_init_1: (+1)
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000046   0x5620             LDRSB    R0,[R4, R0]
   \   00000048   0x0001             MOVS     R1,R0
   \   0000004A   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000004C   0x....             LDR.N    R0,??DataTable7_18  ;; 0x4006a000
   \   0000004E   0x.... 0x....      BL       LPLD_UART_PutChar
    197            }
   \   00000052   0x1C64             ADDS     R4,R4,#+1
   \                     ??MT9V032_CFG_init_0: (+1)
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x2C08             CMP      R4,#+8
   \   00000058   0xDBF3             BLT.N    ??MT9V032_CFG_init_1
    198            my_delay(9999999);
   \   0000005A   0x....             LDR.N    R0,??DataTable7_29  ;; 0x98967f
   \   0000005C   0x.... 0x....      BL       my_delay
    199          }
   \   00000060   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    200          
    201          

   \                                 In section .text, align 4, keep-with-next
    202          void portb_isr()
    203          {  
    204            if(LPLD_GPIO_IsPinxExt(PORTB, GPIO_Pin23)) // 场中断          
   \                     portb_isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_30  ;; 0x4004a0a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0200             LSLS     R0,R0,#+8
   \   00000006   0xD521             BPL.N    ??portb_isr_0
    205            {     
    206              LPLD_GPIO_ClearIntFlag(PORTB);
   \   00000008   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000C   0x....             LDR.N    R1,??DataTable7_30  ;; 0x4004a0a0
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    207              if( (WhichBuffer==1&&lock!=1) || (WhichBuffer==2&&lock!=2) )//将要传图1且图1没有在处理，或者将要传图2且图2没有在处理
   \   00000010   0x....             LDR.N    R0,??DataTable7_31
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD103             BNE.N    ??portb_isr_1
   \   00000018   0x....             LDR.N    R0,??DataTable7_32
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD107             BNE.N    ??portb_isr_2
   \                     ??portb_isr_1: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable7_31
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD107             BNE.N    ??portb_isr_3
   \   00000028   0x....             LDR.N    R0,??DataTable7_32
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2802             CMP      R0,#+2
   \   0000002E   0xD003             BEQ.N    ??portb_isr_3
    208                start_flag=1; //丢弃不完整的第一帧图像，DMA启动标志，采集开始
   \                     ??portb_isr_2: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable7_33
   \   00000034   0x7008             STRB     R0,[R1, #+0]
   \   00000036   0xE002             B.N      ??portb_isr_4
    209              else
    210                start_flag=0;  //忙，不传图
   \                     ??portb_isr_3: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable7_33
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    211              rowAdr=0;
   \                     ??portb_isr_4: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable7_34
   \   00000042   0x7008             STRB     R0,[R1, #+0]
    212              row=0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable7_35
   \   00000048   0x7008             STRB     R0,[R1, #+0]
   \   0000004A   0xE050             B.N      ??portb_isr_5
    213            } 
    214            else if(LPLD_GPIO_IsPinxExt(PORTB, GPIO_Pin20)&&start_flag==1) //行中断，逐行采集                                                 
   \                     ??portb_isr_0: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable7_30  ;; 0x4004a0a0
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x02C0             LSLS     R0,R0,#+11
   \   00000052   0xD54C             BPL.N    ??portb_isr_5
   \   00000054   0x....             LDR.N    R0,??DataTable7_33
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD148             BNE.N    ??portb_isr_5
    215            {
    216              LPLD_GPIO_ClearIntFlag(PORTB);
   \   0000005C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000060   0x....             LDR.N    R1,??DataTable7_30  ;; 0x4004a0a0
   \   00000062   0x6008             STR      R0,[R1, #+0]
    217              row++;
   \   00000064   0x....             LDR.N    R0,??DataTable7_35
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0x....             LDR.N    R1,??DataTable7_35
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
    218              if(row>=ROWbegin && row<ROWend)
   \   0000006E   0x....             LDR.N    R0,??DataTable7_35
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x3850             SUBS     R0,R0,#+80
   \   00000074   0x285A             CMP      R0,#+90
   \   00000076   0xD21F             BCS.N    ??portb_isr_6
    219              {
    220                if(WhichBuffer==1)
   \   00000078   0x....             LDR.N    R0,??DataTable7_31
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD108             BNE.N    ??portb_isr_7
    221                  LPLD_DMA_LoadDstAddr(DMA_CH0,(Image1[rowAdr]));//加载或更换目的地址
   \   00000080   0x....             LDR.N    R0,??DataTable7_12
   \   00000082   0x....             LDR.N    R1,??DataTable7_34
   \   00000084   0x7809             LDRB     R1,[R1, #+0]
   \   00000086   0x22B4             MOVS     R2,#+180
   \   00000088   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000008C   0x....             LDR.N    R1,??DataTable7_36  ;; 0x40009010
   \   0000008E   0x6008             STR      R0,[R1, #+0]
   \   00000090   0xE007             B.N      ??portb_isr_8
    222                else
    223                  LPLD_DMA_LoadDstAddr(DMA_CH0,(Image2[rowAdr]));
   \                     ??portb_isr_7: (+1)
   \   00000092   0x....             LDR.N    R0,??DataTable7_37
   \   00000094   0x....             LDR.N    R1,??DataTable7_34
   \   00000096   0x7809             LDRB     R1,[R1, #+0]
   \   00000098   0x22B4             MOVS     R2,#+180
   \   0000009A   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000009E   0x....             LDR.N    R1,??DataTable7_36  ;; 0x40009010
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    224                LPLD_DMA_EnableReq(DMA_CH0);//初始化中设定主循环结束屏蔽请求源，故每一行都需重新使能请求源
   \                     ??portb_isr_8: (+1)
   \   000000A2   0x....             LDR.N    R0,??DataTable7_38  ;; 0x4000800c
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000AA   0x....             LDR.N    R1,??DataTable7_38  ;; 0x4000800c
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    225                rowAdr++; 
   \   000000AE   0x....             LDR.N    R0,??DataTable7_34
   \   000000B0   0x7800             LDRB     R0,[R0, #+0]
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0x....             LDR.N    R1,??DataTable7_34
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    226              }
    227              if(row>=ROWend)
   \                     ??portb_isr_6: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable7_35
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x28AA             CMP      R0,#+170
   \   000000BE   0xDB16             BLT.N    ??portb_isr_5
    228              {
    229                LPLD_DMA_DisableReq(DMA_CH0);//采集结束，屏蔽DMA请求源
   \   000000C0   0x....             LDR.N    R0,??DataTable7_38  ;; 0x4000800c
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x0840             LSRS     R0,R0,#+1
   \   000000C6   0x0040             LSLS     R0,R0,#+1
   \   000000C8   0x....             LDR.N    R1,??DataTable7_38  ;; 0x4000800c
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    230                if(WhichBuffer==1)
   \   000000CC   0x....             LDR.N    R0,??DataTable7_31
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x2801             CMP      R0,#+1
   \   000000D2   0xD103             BNE.N    ??portb_isr_9
    231                  WhichBuffer=2;  //切换传图，图1图2依次传输
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x....             LDR.N    R1,??DataTable7_31
   \   000000D8   0x7008             STRB     R0,[R1, #+0]
   \   000000DA   0xE002             B.N      ??portb_isr_10
    232                else
    233                  WhichBuffer=1;
   \                     ??portb_isr_9: (+1)
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x....             LDR.N    R1,??DataTable7_31
   \   000000E0   0x7008             STRB     R0,[R1, #+0]
    234                end_flag=1;
   \                     ??portb_isr_10: (+1)
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x....             LDR.N    R1,??DataTable7_28
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
    235                start_flag=0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x....             LDR.N    R1,??DataTable7_33
   \   000000EC   0x7008             STRB     R0,[R1, #+0]
    236              }
    237            }
    238          }
   \                     ??portb_isr_5: (+1)
   \   000000EE   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    239          void my_delay(long t)
    240          {
    241              while(t--);
   \                     my_delay: (+1)
   \                     ??my_delay_0: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD1FB             BNE.N    ??my_delay_0
    242          }
   \   00000008   0x4770             BX       LR               ;; return
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void Calculate_Middle_Point(void)
    245          {
   \                     Calculate_Middle_Point: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    246            int i,j,k=0,prok=0,minj=COLUMN,maxj=0,mini=ROWend,maxi=ROWbegin;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x22B4             MOVS     R2,#+180
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x24AA             MOVS     R4,#+170
   \   0000000E   0x2550             MOVS     R5,#+80
    247            int pointy,pointx;
    248            if(WhichBuffer == 2)//正在传图2
   \   00000010   0x.... 0x....      LDR.W    R12,??DataTable7_31
   \   00000014   0xF89C 0xC000      LDRB     R12,[R12, #+0]
   \   00000018   0xF1BC 0x0F02      CMP      R12,#+2
   \   0000001C   0xD139             BNE.N    ??Calculate_Middle_Point_0
    249            {
    250              lock=1;//锁图1，处理图1
   \   0000001E   0xF05F 0x0C01      MOVS     R12,#+1
   \   00000022   0x.... 0x....      LDR.W    LR,??DataTable7_32
   \   00000026   0xF88E 0xC000      STRB     R12,[LR, #+0]
    251              for(i=0;i<ROWnum;i++)
   \   0000002A   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000002E   0xE02A             B.N      ??Calculate_Middle_Point_1
    252              {
    253                for(j=0;j<COLUMN;j++)
    254                {
    255                  if(Image1[i][j]>=setvalue)
   \                     ??Calculate_Middle_Point_2: (+1)
   \   00000030   0x.... 0x....      LDR.W    R8,??DataTable7_12
   \   00000034   0xF05F 0x09B4      MOVS     R9,#+180
   \   00000038   0xFB09 0x880C      MLA      R8,R9,R12,R8
   \   0000003C   0xF81E 0x8008      LDRB     R8,[LR, R8]
   \   00000040   0x.... 0x....      LDR.W    R9,??DataTable7_39
   \   00000044   0xF899 0x9000      LDRB     R9,[R9, #+0]
   \   00000048   0x45C8             CMP      R8,R9
   \   0000004A   0xD30C             BCC.N    ??Calculate_Middle_Point_3
    256                  {
    257                    k++;
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
    258                    if(j<=minj)
   \   0000004E   0x4572             CMP      R2,LR
   \   00000050   0xDB00             BLT.N    ??Calculate_Middle_Point_4
    259                      minj=j;
   \   00000052   0x4672             MOV      R2,LR
    260                    if(j>=maxj)
   \                     ??Calculate_Middle_Point_4: (+1)
   \   00000054   0x459E             CMP      LR,R3
   \   00000056   0xDB00             BLT.N    ??Calculate_Middle_Point_5
    261                      maxj=j;
   \   00000058   0x4673             MOV      R3,LR
    262                    if(mini>i)
   \                     ??Calculate_Middle_Point_5: (+1)
   \   0000005A   0x45A4             CMP      R12,R4
   \   0000005C   0xDA00             BGE.N    ??Calculate_Middle_Point_6
    263                      mini=i;
   \   0000005E   0x4664             MOV      R4,R12
    264                    if(maxi<i)
   \                     ??Calculate_Middle_Point_6: (+1)
   \   00000060   0x4565             CMP      R5,R12
   \   00000062   0xDA00             BGE.N    ??Calculate_Middle_Point_3
    265                      maxi=i;
   \   00000064   0x4665             MOV      R5,R12
    266                  }
    267                }
   \                     ??Calculate_Middle_Point_3: (+1)
   \   00000066   0xF11E 0x0E01      ADDS     LR,LR,#+1
   \                     ??Calculate_Middle_Point_7: (+1)
   \   0000006A   0xF1BE 0x0FB4      CMP      LR,#+180
   \   0000006E   0xDBDF             BLT.N    ??Calculate_Middle_Point_2
    268                if(k>prok)
   \   00000070   0x4281             CMP      R1,R0
   \   00000072   0xDA05             BGE.N    ??Calculate_Middle_Point_8
    269                {
    270                  prok=k;
   \   00000074   0x0001             MOVS     R1,R0
    271                  pointy=i;
   \   00000076   0x4666             MOV      R6,R12
    272                  pointx=(minj+maxj)/2;
   \   00000078   0x1898             ADDS     R0,R3,R2
   \   0000007A   0x2702             MOVS     R7,#+2
   \   0000007C   0xFB90 0xF7F7      SDIV     R7,R0,R7
    273                }
    274                k=0;
   \                     ??Calculate_Middle_Point_8: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \                     ??Calculate_Middle_Point_1: (+1)
   \   00000086   0xF1BC 0x0F5A      CMP      R12,#+90
   \   0000008A   0xDA43             BGE.N    ??Calculate_Middle_Point_9
   \   0000008C   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000090   0xE7EB             B.N      ??Calculate_Middle_Point_7
    275              }
    276            }
    277            else if(WhichBuffer == 1)//正在传图1
   \                     ??Calculate_Middle_Point_0: (+1)
   \   00000092   0x.... 0x....      LDR.W    R12,??DataTable7_31
   \   00000096   0xF89C 0xC000      LDRB     R12,[R12, #+0]
   \   0000009A   0xF1BC 0x0F01      CMP      R12,#+1
   \   0000009E   0xD139             BNE.N    ??Calculate_Middle_Point_9
    278            {
    279              lock=2;//锁图2，处理图2
   \   000000A0   0xF05F 0x0C02      MOVS     R12,#+2
   \   000000A4   0x.... 0x....      LDR.W    LR,??DataTable7_32
   \   000000A8   0xF88E 0xC000      STRB     R12,[LR, #+0]
    280              for(i=0;i<ROWnum;i++)
   \   000000AC   0xF05F 0x0C00      MOVS     R12,#+0
   \   000000B0   0xE02A             B.N      ??Calculate_Middle_Point_10
    281              {
    282                for(j=0;j<COLUMN;j++)
    283                {
    284                  if(Image2[i][j]>=setvalue)
   \                     ??Calculate_Middle_Point_11: (+1)
   \   000000B2   0x.... 0x....      LDR.W    R8,??DataTable7_37
   \   000000B6   0xF05F 0x09B4      MOVS     R9,#+180
   \   000000BA   0xFB09 0x880C      MLA      R8,R9,R12,R8
   \   000000BE   0xF81E 0x8008      LDRB     R8,[LR, R8]
   \   000000C2   0x.... 0x....      LDR.W    R9,??DataTable7_39
   \   000000C6   0xF899 0x9000      LDRB     R9,[R9, #+0]
   \   000000CA   0x45C8             CMP      R8,R9
   \   000000CC   0xD30C             BCC.N    ??Calculate_Middle_Point_12
    285                  {
    286                    k++;
   \   000000CE   0x1C40             ADDS     R0,R0,#+1
    287                    if(j<=minj)
   \   000000D0   0x4572             CMP      R2,LR
   \   000000D2   0xDB00             BLT.N    ??Calculate_Middle_Point_13
    288                      minj=j;
   \   000000D4   0x4672             MOV      R2,LR
    289                    if(j>=maxj)
   \                     ??Calculate_Middle_Point_13: (+1)
   \   000000D6   0x459E             CMP      LR,R3
   \   000000D8   0xDB00             BLT.N    ??Calculate_Middle_Point_14
    290                      maxj=j;
   \   000000DA   0x4673             MOV      R3,LR
    291                    if(mini>i)
   \                     ??Calculate_Middle_Point_14: (+1)
   \   000000DC   0x45A4             CMP      R12,R4
   \   000000DE   0xDA00             BGE.N    ??Calculate_Middle_Point_15
    292                      mini=i;
   \   000000E0   0x4664             MOV      R4,R12
    293                    if(maxi<i)
   \                     ??Calculate_Middle_Point_15: (+1)
   \   000000E2   0x4565             CMP      R5,R12
   \   000000E4   0xDA00             BGE.N    ??Calculate_Middle_Point_12
    294                      maxi=i;
   \   000000E6   0x4665             MOV      R5,R12
    295                  }
    296                }
   \                     ??Calculate_Middle_Point_12: (+1)
   \   000000E8   0xF11E 0x0E01      ADDS     LR,LR,#+1
   \                     ??Calculate_Middle_Point_16: (+1)
   \   000000EC   0xF1BE 0x0FB4      CMP      LR,#+180
   \   000000F0   0xDBDF             BLT.N    ??Calculate_Middle_Point_11
    297                if(k>prok)
   \   000000F2   0x4281             CMP      R1,R0
   \   000000F4   0xDA05             BGE.N    ??Calculate_Middle_Point_17
    298                {
    299                  prok=k;
   \   000000F6   0x0001             MOVS     R1,R0
    300                  pointy=i;
   \   000000F8   0x4666             MOV      R6,R12
    301                  pointx=(minj+maxj)/2;
   \   000000FA   0x1898             ADDS     R0,R3,R2
   \   000000FC   0x2702             MOVS     R7,#+2
   \   000000FE   0xFB90 0xF7F7      SDIV     R7,R0,R7
    302                }
    303                k=0;     
   \                     ??Calculate_Middle_Point_17: (+1)
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \                     ??Calculate_Middle_Point_10: (+1)
   \   00000108   0xF1BC 0x0F5A      CMP      R12,#+90
   \   0000010C   0xDA02             BGE.N    ??Calculate_Middle_Point_9
   \   0000010E   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000112   0xE7EB             B.N      ??Calculate_Middle_Point_16
    304              }
    305            } 
    306             lock=0; //解除图像锁定
   \                     ??Calculate_Middle_Point_9: (+1)
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x....             LDR.N    R2,??DataTable7_32
   \   00000118   0x7010             STRB     R0,[R2, #+0]
    307            
    308            
    309          
    310            
    311            if (prok==0 ||pointx<=3||pointx>=177)//如果没有亮点 
   \   0000011A   0x2900             CMP      R1,#+0
   \   0000011C   0xD002             BEQ.N    ??Calculate_Middle_Point_18
   \   0000011E   0x1F38             SUBS     R0,R7,#+4
   \   00000120   0x28AD             CMP      R0,#+173
   \   00000122   0xD306             BCC.N    ??Calculate_Middle_Point_19
    312            {
    313              NOpoint=1;
   \                     ??Calculate_Middle_Point_18: (+1)
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x....             LDR.N    R1,??DataTable7_40
   \   00000128   0x7008             STRB     R0,[R1, #+0]
    314              last_nopoint=1;
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0x....             LDR.N    R1,??DataTable7_41
   \   0000012E   0x7008             STRB     R0,[R1, #+0]
   \   00000130   0xE01E             B.N      ??Calculate_Middle_Point_20
    315              
    316            }
    317            else 
    318            {
    319              if ( last_nopoint )//上一幅没图
   \                     ??Calculate_Middle_Point_19: (+1)
   \   00000132   0x....             LDR.N    R0,??DataTable7_41
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0x2800             CMP      R0,#+0
   \   00000138   0xD00D             BEQ.N    ??Calculate_Middle_Point_21
    320              {
    321                if (pointx>=5&&pointx<=175)
   \   0000013A   0x1F78             SUBS     R0,R7,#+5
   \   0000013C   0x28AB             CMP      R0,#+171
   \   0000013E   0xD217             BCS.N    ??Calculate_Middle_Point_20
    322                {
    323                  NOpoint=0;
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0x....             LDR.N    R1,??DataTable7_40
   \   00000144   0x7008             STRB     R0,[R1, #+0]
    324                  real_pointy=pointy; //一场图像真正的中点！！！有图才更新
   \   00000146   0x....             LDR.N    R0,??DataTable7_42
   \   00000148   0x7006             STRB     R6,[R0, #+0]
    325                  real_pointx=pointx; //一场图像真正的中点！！！
   \   0000014A   0x....             LDR.N    R0,??DataTable7_43
   \   0000014C   0x7007             STRB     R7,[R0, #+0]
    326                  last_nopoint=0;
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x....             LDR.N    R1,??DataTable7_41
   \   00000152   0x7008             STRB     R0,[R1, #+0]
   \   00000154   0xE00C             B.N      ??Calculate_Middle_Point_20
    327                }
    328              }
    329              else   //上一幅有图
    330              {
    331                if (pointx>=3&&pointx<=177)
   \                     ??Calculate_Middle_Point_21: (+1)
   \   00000156   0x1EF8             SUBS     R0,R7,#+3
   \   00000158   0x28AF             CMP      R0,#+175
   \   0000015A   0xD209             BCS.N    ??Calculate_Middle_Point_20
    332                {
    333                  NOpoint=0;
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0x....             LDR.N    R1,??DataTable7_40
   \   00000160   0x7008             STRB     R0,[R1, #+0]
    334                  real_pointy=pointy; //一场图像真正的中点！！！有图才更新
   \   00000162   0x....             LDR.N    R0,??DataTable7_42
   \   00000164   0x7006             STRB     R6,[R0, #+0]
    335                  real_pointx=pointx; //一场图像真正的中点！！！
   \   00000166   0x....             LDR.N    R0,??DataTable7_43
   \   00000168   0x7007             STRB     R7,[R0, #+0]
    336                  last_nopoint=0;
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x....             LDR.N    R1,??DataTable7_41
   \   0000016E   0x7008             STRB     R0,[R1, #+0]
    337                }
    338              }
    339              
    340            }
    341            
    342            
    343            /*
    344            if(real_pointy>15 && NOpoint==0)//屏蔽从机避障信号
    345            {
    346              disable_irq(PORTD_IRQn);//左障碍
    347              disable_irq(PORTE_IRQn);//右障碍
    348            }
    349            else  //使能从机避障信号
    350            {
    351              enable_irq(PORTD_IRQn);//左障碍
    352              enable_irq(PORTE_IRQn);//右障碍
    353            }
    354            */
    355            
    356          }
   \                     ??Calculate_Middle_Point_20: (+1)
   \   00000170   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ??dmaReq_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x00020003         DC32     0x20003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ??href_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x00090013         DC32     0x90013

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ??vsync_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ??data_port_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ??dma_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x400FF090         DC32     0x400ff090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     Image1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     ??uart4_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     uart4_isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     ??uart3_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     ??uart0_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     ??RxData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     ??RxState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     ??data_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     ??data_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x........         DC32     bzx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x........         DC32     bzy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     bz_turn_pwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     bz_nopoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     end_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x0098967F         DC32     0x98967f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x4004A0A0         DC32     0x4004a0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x........         DC32     WhichBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     lock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_33:
   \   00000000   0x........         DC32     start_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_34:
   \   00000000   0x........         DC32     rowAdr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_35:
   \   00000000   0x........         DC32     row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_36:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_37:
   \   00000000   0x........         DC32     Image2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_38:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_39:
   \   00000000   0x........         DC32     setvalue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_40:
   \   00000000   0x........         DC32     NOpoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_41:
   \   00000000   0x........         DC32     last_nopoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_42:
   \   00000000   0x........         DC32     real_pointy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_43:
   \   00000000   0x........         DC32     real_pointx
    357          
    358          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      28   Calculate_Middle_Point
      16   MT9V032_CFG_init
        16   -> LPLD_UART_PutChar
        16   -> my_delay
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
      48   camera_init
        32   -> LPLD_DMA_Init
        32   -> LPLD_GPIO_EnableIrq
        32   -> LPLD_GPIO_Init
        32   -> LPLD_UART_EnableIrq
        32   -> LPLD_UART_Init
        32   -> MT9V032_CFG_init
        48   -> __aeabi_memcpy4
       0   my_delay
      16   picture_send
        16   -> LPLD_UART_PutChar
        16   -> NVIC_DisableIRQ
        16   -> NVIC_EnableIRQ
       0   portb_isr
      16   uart3_isr
        16   -> LPLD_UART_GetChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_33
       4  ??DataTable7_34
       4  ??DataTable7_35
       4  ??DataTable7_36
       4  ??DataTable7_37
       4  ??DataTable7_38
       4  ??DataTable7_39
       4  ??DataTable7_4
       4  ??DataTable7_40
       4  ??DataTable7_41
       4  ??DataTable7_42
       4  ??DataTable7_43
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     372  Calculate_Middle_Point
   43200  Image1
   43200  Image2
      98  MT9V032_CFG_init
       1  NOpoint
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
       1  RxData
       1  RxState
       1  WhichBuffer
       1  bz_nopoint
       4  bz_turn_pwm
       1  bzx
       1  bzy
     634  camera_init
       1  data_cnt
       1  data_len
      20  data_port_struct
      20  dmaReq_port_struct
      44  dma_init_struct
       1  end_flag
      20  href_port_struct
       1  last_nopoint
       1  lock
      10  my_delay
     118  picture_send
     240  portb_isr
       1  pre_pointx
       1  real_pointx
       1  real_pointy
       1  row
       1  rowAdr
       1  setvalue
       1  start_flag
      28  uart0_init_struct
      28  uart3_init_struct
     308  uart3_isr
      28  uart4_init_struct
      20  vsync_port_struct

 
 86 628 bytes in section .bss
      3 bytes in section .data
  2 000 bytes in section .text
 
  2 000 bytes of CODE memory
 86 631 bytes of DATA memory

Errors: none
Warnings: 3
