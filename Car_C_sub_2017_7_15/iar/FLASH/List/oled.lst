###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       21/Aug/2017  09:52:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\app\oled.c
#    Command line =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\app\oled.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\FLASH\List
#        -lB
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\FLASH\List
#        -o
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\FLASH\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR Systems\Embedded
#        Workbench 7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\app\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\CPU\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\LPLD\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\FatFs\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\USB\common\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\..\..\..\lib\USB\class\
#        -Ol -I "E:\IAR Systems\Embedded Workbench 7.3\arm\CMSIS\Include\" -D
#        ARM_MATH_CM4
#    List file    =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\FLASH\List\oled.lst
#    Object file  =  
#        G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\iar\FLASH\Obj\oled.o
#
###############################################################################

G:\study\car\program\lib_and_example\LPLD_OSKinetis_V3\project\Car_C_sub_2017_7_15\app\oled.c
      1          
      2          //#include "camera.h"
      3          #include "oled.h"
      4          #include "common.h"
      5          //OLED显示屏
      6          //定义输出
      7          #define LED_SCLK(x) LPLD_GPIO_Output_b(PTC, 16, x)// d0
      8          #define LED_SDA(x)  LPLD_GPIO_Output_b(PTC, 17, x)//d1
      9          #define LED_RST(x)  LPLD_GPIO_Output_b(PTC, 18, x)//复位低能电平
     10          #define LED_DC(x)   LPLD_GPIO_Output_b(PTC, 19, x)//偏置常低
     11          //OLED显示函数
     12          
     13          
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void led_gpio_int(void)
     16          {
   \                     led_gpio_int: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     17            static GPIO_InitTypeDef led_Port_init;
     18            led_Port_init.GPIO_PTx = PTC;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     19            led_Port_init.GPIO_Dir = DIR_OUTPUT;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000012   0x7308             STRB     R0,[R1, #+12]
     20            led_Port_init.GPIO_Pins = GPIO_Pin16|GPIO_Pin17|GPIO_Pin18|GPIO_Pin19;
   \   00000014   0xF45F 0x2070      MOVS     R0,#+983040
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000001C   0x6048             STR      R0,[R1, #+4]
     21            led_Port_init.GPIO_Output  = OUTPUT_H ;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000024   0x7348             STRB     R0,[R1, #+13]
     22            LPLD_GPIO_Init(led_Port_init);
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   0000002A   0xB084             SUB      SP,SP,#+16
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x2214             MOVS     R2,#+20
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000034   0xBC0F             POP      {R0-R3}
   \   00000036   0x.... 0x....      BL       LPLD_GPIO_Init
     23          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??led_Port_init:
   \   00000000                      DS8 20
     24          
     25          
     26            
     27          /*定义ASCII码表*/

   \                                 In section .rodata, align 4
     28          const unsigned char F6x8[][6] =
   \                     F6x8:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x2F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \              0x07 0x00    
   \              0x00 0x14    
   \              0x7F         
   \   00000015   0x14 0x7F          DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
   \              0x14 0x00    
   \              0x24 0x2A    
   \              0x7F 0x2A    
   \              0x12 0x00    
   \              0x62 0x64    
   \              0x08 0x13    
   \              0x23 0x00    
   \              0x36         
   \   00000026   0x49 0x55          DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \              0x22 0x50    
   \              0x00 0x00    
   \              0x05 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x00    
   \              0x00 0x00    
   \              0x41 0x22    
   \   0000003A   0x1C 0x00          DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
   \              0x00 0x14    
   \              0x08 0x3E    
   \              0x08 0x14    
   \              0x00 0x08    
   \              0x08 0x3E    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x60 0x00    
   \   0000004E   0x00 0x08          DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x60 0x60    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \              0x00 0x3E    
   \              0x51         
   \   00000063   0x49 0x45          DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \              0x3E 0x00    
   \              0x00 0x42    
   \              0x7F 0x40    
   \              0x00 0x00    
   \              0x42 0x61    
   \              0x51 0x49    
   \              0x46 0x00    
   \              0x21 0x41    
   \   00000075   0x45 0x4B          DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \              0x31 0x00    
   \              0x18 0x14    
   \              0x12 0x7F    
   \              0x10 0x00    
   \              0x27 0x45    
   \              0x45 0x45    
   \              0x39 0x00    
   \              0x3C         
   \   00000086   0x4A 0x49          DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \              0x49 0x30    
   \              0x00 0x01    
   \              0x71 0x09    
   \              0x05 0x03    
   \              0x00 0x36    
   \              0x49 0x49    
   \              0x49 0x36    
   \              0x00 0x06    
   \              0x49         
   \   00000099   0x49 0x29          DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \              0x1E 0x00    
   \              0x00 0x36    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x00 0x56    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x08 0x14    
   \              0x22         
   \   000000AC   0x41 0x00          DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \              0x00 0x14    
   \              0x14 0x14    
   \              0x14 0x14    
   \              0x00 0x00    
   \              0x41 0x22    
   \              0x14 0x08    
   \              0x00 0x02    
   \              0x01 0x51    
   \              0x09         
   \   000000BF   0x06 0x00          DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
   \              0x32 0x49    
   \              0x59 0x51    
   \              0x3E 0x00    
   \              0x7C 0x12    
   \              0x11 0x12    
   \              0x7C 0x00    
   \              0x7F 0x49    
   \              0x49         
   \   000000D0   0x49 0x36          DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x22    
   \              0x00 0x7F    
   \              0x41 0x41    
   \              0x22 0x1C    
   \              0x00 0x7F    
   \              0x49         
   \   000000E1   0x49 0x49          DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \              0x41 0x00    
   \              0x7F 0x09    
   \              0x09 0x09    
   \              0x01 0x00    
   \              0x3E 0x41    
   \              0x49 0x49    
   \              0x7A 0x00    
   \              0x7F 0x08    
   \   000000F3   0x08 0x08          DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \              0x7F 0x00    
   \              0x00 0x41    
   \              0x7F 0x41    
   \              0x00 0x00    
   \              0x20 0x40    
   \              0x41 0x3F    
   \              0x01 0x00    
   \              0x7F 0x08    
   \   00000105   0x14 0x22          DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \              0x41 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x7F 0x02    
   \              0x0C 0x02    
   \              0x7F 0x00    
   \              0x7F         
   \   00000116   0x04 0x08          DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \              0x10 0x7F    
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x3E    
   \              0x00 0x7F    
   \              0x09 0x09    
   \              0x09 0x06    
   \              0x00 0x3E    
   \              0x41         
   \   00000129   0x51 0x21          DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \              0x5E 0x00    
   \              0x7F 0x09    
   \              0x19 0x29    
   \              0x46 0x00    
   \              0x46 0x49    
   \              0x49 0x49    
   \              0x31 0x00    
   \              0x01 0x01    
   \   0000013B   0x7F 0x01          DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \              0x01 0x00    
   \              0x3F 0x40    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x1F 0x20    
   \              0x40 0x20    
   \              0x1F 0x00    
   \              0x3F 0x40    
   \   0000014D   0x38 0x40          DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \              0x3F 0x00    
   \              0x63 0x14    
   \              0x08 0x14    
   \              0x63 0x00    
   \              0x07 0x08    
   \              0x70 0x08    
   \              0x07 0x00    
   \              0x61 0x51    
   \              0x49         
   \   00000160   0x45 0x43          DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 2, 4, 8, 16, 32, 0, 0, 65, 65, 127
   \              0x00 0x00    
   \              0x7F 0x41    
   \              0x41 0x00    
   \              0x00 0x02    
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x00 0x00    
   \              0x41 0x41    
   \              0x7F         
   \   00000173   0x00 0x00          DC8 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0, 0, 32
   \              0x04 0x02    
   \              0x01 0x02    
   \              0x04 0x00    
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x00 0x01    
   \              0x02 0x04    
   \              0x00 0x00    
   \              0x20         
   \   00000188   0x54 0x54          DC8 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68, 32, 0
   \              0x54 0x78    
   \              0x00 0x7F    
   \              0x48 0x44    
   \              0x44 0x38    
   \              0x00 0x38    
   \              0x44 0x44    
   \              0x44 0x20    
   \              0x00         
   \   00000199   0x38 0x44          DC8 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1, 2, 0
   \              0x44 0x48    
   \              0x7F 0x00    
   \              0x38 0x54    
   \              0x54 0x54    
   \              0x18 0x00    
   \              0x08 0x7E    
   \              0x09 0x01    
   \              0x02 0x00    
   \   000001AB   0x18 0xA4          DC8 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125, 64, 0
   \              0xA4 0xA4    
   \              0x7C 0x00    
   \              0x7F 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x00 0x44    
   \              0x7D 0x40    
   \              0x00         
   \   000001BC   0x00 0x40          DC8 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65, 127, 64
   \              0x80 0x84    
   \              0x7D 0x00    
   \              0x00 0x7F    
   \              0x10 0x28    
   \              0x44 0x00    
   \              0x00 0x00    
   \              0x41 0x7F    
   \              0x40         
   \   000001CD   0x00 0x00          DC8 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68, 68, 68
   \              0x7C 0x04    
   \              0x18 0x04    
   \              0x78 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x38 0x44    
   \              0x44 0x44    
   \   000001DF   0x38 0x00          DC8 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124, 8, 4, 4
   \              0xFC 0x24    
   \              0x24 0x24    
   \              0x18 0x00    
   \              0x18 0x24    
   \              0x24 0x18    
   \              0xFC 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \   000001F1   0x08 0x00          DC8 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64, 64, 32
   \              0x48 0x54    
   \              0x54 0x54    
   \              0x20 0x00    
   \              0x04 0x3F    
   \              0x44 0x40    
   \              0x20 0x00    
   \              0x3C 0x40    
   \              0x40 0x20    
   \   00000203   0x7C 0x00          DC8 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68, 40, 16
   \              0x1C 0x20    
   \              0x40 0x20    
   \              0x1C 0x00    
   \              0x3C 0x40    
   \              0x30 0x40    
   \              0x3C 0x00    
   \              0x44 0x28    
   \              0x10         
   \   00000214   0x28 0x44          DC8 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68, 20, 20
   \              0x00 0x1C    
   \              0xA0 0xA0    
   \              0xA0 0x7C    
   \              0x00 0x44    
   \              0x64 0x54    
   \              0x4C 0x44    
   \              0x14 0x14    
   \   00000224   0x14 0x14          DC8 20, 20, 20, 20
   \              0x14 0x14    
     29          {
     30          	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
     31          	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
     32          	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
     33          	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
     34          	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
     35          	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
     36          	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
     37          	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
     38          	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
     39          	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
     40          	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
     41          	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
     42          	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
     43          	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
     44          	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
     45          	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
     46          	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
     47          	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
     48          	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
     49          	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
     50          	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
     51          	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
     52          	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
     53          	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
     54          	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
     55          	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
     56          	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
     57          	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
     58          	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
     59          	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
     60          	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
     61          	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
     62          	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
     63          	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
     64          	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
     65          	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
     66          	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
     67          	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
     68          	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
     69          	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
     70          	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
     71          	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
     72          	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
     73          	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
     74          	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
     75          	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
     76          	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
     77          	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
     78          	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
     79          	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
     80          	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
     81          	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
     82          	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
     83          	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
     84          	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
     85          	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
     86          	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
     87          	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
     88          	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
     89          	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [ 91
     90          	{ 0x00, 0x02, 0x04 ,0x08, 0x10, 0x20 },    // \92
     91          	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
     92          	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
     93          	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
     94          	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
     95          	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
     96          	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
     97          	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
     98          	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
     99          	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
    100          	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
    101          	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
    102          	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
    103          	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
    104          	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
    105          	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    106          	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
    107          	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
    108          	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
    109          	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
    110          	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
    111          	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
    112          	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    113          	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    114          	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    115          	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    116          	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    117          	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    118          	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    119          	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    120          	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    121          	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    122          };
    123          
    124          //写数据函数

   \                                 In section .text, align 4, keep-with-next
    125          void LED_WrDat(unsigned char data)   
    126          {
   \                     LED_WrDat: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    127          	unsigned char i = 8;
   \   00000004   0x2508             MOVS     R5,#+8
    128          	//LED_CS=0;
    129          	LED_DC(1);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x2113             MOVS     R1,#+19
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000000E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    130          	LED_SCLK(0);  
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000001A   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   0000001E   0xE013             B.N      ??LED_WrDat_0
    131          	while (i--)
    132          	{
    133          		if (data & 0x80)
    134          		{
    135          			LED_SDA(1);
    136          		}
    137          		else
    138          		{
    139          			LED_SDA(0);
   \                     ??LED_WrDat_1: (+1)
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2111             MOVS     R1,#+17
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Output_b
    140          		}
    141          		LED_SCLK(1); 
   \                     ??LED_WrDat_2: (+1)
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x2110             MOVS     R1,#+16
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000034   0x.... 0x....      BL       LPLD_GPIO_Output_b
    142          		asm("nop");     
   \   00000038   0xBF00             nop
    143          		LED_SCLK(0);    
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x2110             MOVS     R1,#+16
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000042   0x.... 0x....      BL       LPLD_GPIO_Output_b
    144          		data <<= 1;    
   \   00000046   0x0064             LSLS     R4,R4,#+1
   \                     ??LED_WrDat_0: (+1)
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x1E45             SUBS     R5,R0,#+1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD008             BEQ.N    ??LED_WrDat_3
   \   00000052   0x0620             LSLS     R0,R4,#+24
   \   00000054   0xD5E4             BPL.N    ??LED_WrDat_1
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x2111             MOVS     R1,#+17
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000005E   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   00000062   0xE7E3             B.N      ??LED_WrDat_2
    145          	}
    146          }
   \                     ??LED_WrDat_3: (+1)
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    147          //写入命令函数

   \                                 In section .text, align 4, keep-with-next
    148          void LED_WrCmd(unsigned char cmd) 
    149          {
   \                     LED_WrCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    150          	unsigned char i = 8;
   \   00000004   0x2508             MOVS     R5,#+8
    151          	//LED_CS = 0;
    152          	LED_DC(0);
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2113             MOVS     R1,#+19
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000000E   0x.... 0x....      BL       LPLD_GPIO_Output_b
    153          	LED_SCLK(0);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000001A   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   0000001E   0xE013             B.N      ??LED_WrCmd_0
    154          	while (i--)
    155          	{
    156          		if (cmd & 0x80)
    157          		{
    158          			LED_SDA(1);
    159          		}
    160          		else
    161          		{
    162          			LED_SDA(0);
   \                     ??LED_WrCmd_1: (+1)
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2111             MOVS     R1,#+17
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Output_b
    163          		}
    164          		LED_SCLK(1);
   \                     ??LED_WrCmd_2: (+1)
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x2110             MOVS     R1,#+16
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000034   0x.... 0x....      BL       LPLD_GPIO_Output_b
    165          		asm("nop");           
   \   00000038   0xBF00             nop
    166          		LED_SCLK(0);    
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x2110             MOVS     R1,#+16
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000042   0x.... 0x....      BL       LPLD_GPIO_Output_b
    167          		cmd <<= 1;   
   \   00000046   0x0064             LSLS     R4,R4,#+1
   \                     ??LED_WrCmd_0: (+1)
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x1E45             SUBS     R5,R0,#+1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD008             BEQ.N    ??LED_WrCmd_3
   \   00000052   0x0620             LSLS     R0,R4,#+24
   \   00000054   0xD5E4             BPL.N    ??LED_WrCmd_1
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x2111             MOVS     R1,#+17
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000005E   0x.... 0x....      BL       LPLD_GPIO_Output_b
   \   00000062   0xE7E3             B.N      ??LED_WrCmd_2
    168          	} 	
    169          	//LED_CS = 1;
    170          }
   \                     ??LED_WrCmd_3: (+1)
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    171          //设置显示坐标位置

   \                                 In section .text, align 2, keep-with-next
    172          void LED_Set_Pos(unsigned char x, unsigned char y)
    173          { 
   \                     LED_Set_Pos: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    174          	LED_WrCmd(0xb0+y);
   \   00000004   0xF1B1 0x0050      SUBS     R0,R1,#+80
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       LED_WrCmd
    175          	LED_WrCmd(((x&0xf0)>>4)|0x10);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x0900             LSRS     R0,R0,#+4
   \   00000014   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       LED_WrCmd
    176          	LED_WrCmd((x&0x0f)|0x00); 
   \   0000001E   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000022   0x.... 0x....      BL       LED_WrCmd
    177          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    178          //清屏函数

   \                                 In section .text, align 2, keep-with-next
    179          void LED_Fill(unsigned char bmp_data)
    180          {
   \                     LED_Fill: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    181          	unsigned char y,x;
    182          	
    183          	for(y=0;y<8;y++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE008             B.N      ??LED_Fill_0
    184          	{
    185          		LED_WrCmd(0xb0+y);   //0xb0+0~7表示页0~页7?
    186          		LED_WrCmd(0x00);       //0x00+0~16表示将128列分成16组其地址在某组中的第几列
    187          		LED_WrCmd(0x10);      //0x10+0~16表示将128列分成16组其地址所在第几组
    188          		for(x=0;x<128;x++)
    189          			LED_WrDat(bmp_data);
   \                     ??LED_Fill_1: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LED_WrDat
   \   00000010   0x1C76             ADDS     R6,R6,#+1
   \                     ??LED_Fill_2: (+1)
   \   00000012   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   0x2E80             CMP      R6,#+128
   \   00000016   0xDBF7             BLT.N    ??LED_Fill_1
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LED_Fill_0: (+1)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D08             CMP      R5,#+8
   \   0000001E   0xDA0C             BGE.N    ??LED_Fill_3
   \   00000020   0xF1B5 0x0050      SUBS     R0,R5,#+80
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LED_WrCmd
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       LED_WrCmd
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x.... 0x....      BL       LED_WrCmd
   \   00000036   0x2600             MOVS     R6,#+0
   \   00000038   0xE7EB             B.N      ??LED_Fill_2
    190          	}
    191          }
   \                     ??LED_Fill_3: (+1)
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    192          //延时函数

   \                                 In section .text, align 2, keep-with-next
    193          void LED_DLY_ms(unsigned int ms)
    194          {                         
   \                     LED_DLY_ms: (+1)
   \   00000000   0xE007             B.N      ??LED_DLY_ms_0
    195            uint16 a;
    196            while(ms)
    197            {
    198              a=6675;
   \                     ??LED_DLY_ms_1: (+1)
   \   00000002   0xF641 0x2113      MOVW     R1,#+6675
    199              while(a--);
   \                     ??LED_DLY_ms_2: (+1)
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x1E51             SUBS     R1,R2,#+1
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD1FA             BNE.N    ??LED_DLY_ms_2
    200              ms--;
   \   00000010   0x1E40             SUBS     R0,R0,#+1
    201            }
   \                     ??LED_DLY_ms_0: (+1)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1F5             BNE.N    ??LED_DLY_ms_1
    202            return;
   \   00000016   0x4770             BX       LR               ;; return
    203          }
    204          /*__________________________________
    205          |  名称:                           |
    206          |  作用:写数据等                   |
    207          |_________________________________*/

   \                                 In section .text, align 2, keep-with-next
    208          void SetStartColumn(unsigned char d)
    209          {
   \                     SetStartColumn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    210          	LED_WrCmd(0x00+d%16);	// Set Lower Column Start Address for Page Addressing Mode
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2010             MOVS     R0,#+16
   \   00000008   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   0000000C   0xFB01 0x4110      MLS      R1,R1,R0,R4
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       LED_WrCmd
    211          							// Default => 0x00
    212          	LED_WrCmd(0x10+d/16);	// Set Higher Column Start Address for Page Addressing Mode
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2010             MOVS     R0,#+16
   \   0000001C   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   00000020   0x3010             ADDS     R0,R0,#+16
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x.... 0x....      BL       LED_WrCmd
    213          							// Default => 0x10
    214          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    215          void SetAddressingMode(unsigned char d)
    216          {
   \                     SetAddressingMode: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    217          	LED_WrCmd(0x20);			// Set Memory Addressing Mode
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    218          	LED_WrCmd(d);			// Default => 0x02
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    219          							// 0x00 => Horizontal Addressing Mode
    220          							// 0x01 => Vertical Addressing Mode
    221          							// 0x02 => Page Addressing Mode
    222          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void SetColumnAddress(unsigned char a, unsigned char b)
    225          {
   \                     SetColumnAddress: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    226          	LED_WrCmd(0x21);			// Set Column Address
   \   00000006   0x2021             MOVS     R0,#+33
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    227          	LED_WrCmd(a);			// Default => 0x00 (Column Start Address)
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       LED_WrCmd
    228          	LED_WrCmd(b);			// Default => 0x7F (Column End Address)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LED_WrCmd
    229          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    230          

   \                                 In section .text, align 2, keep-with-next
    231          void SetPageAddress(unsigned char a, unsigned char b)
    232          {
   \                     SetPageAddress: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    233          	LED_WrCmd(0x22);			// Set Page Address
   \   00000006   0x2022             MOVS     R0,#+34
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    234          	LED_WrCmd(a);			// Default => 0x00 (Page Start Address)
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       LED_WrCmd
    235          	LED_WrCmd(b);			// Default => 0x07 (Page End Address)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LED_WrCmd
    236          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    237          

   \                                 In section .text, align 2, keep-with-next
    238          void SetStartLine(unsigned char d)
    239          {
   \                     SetStartLine: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    240          	LED_WrCmd(0x40|d);		// Set Display Start Line
   \   00000002   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    241          							// Default => 0x40 (0x00)
    242          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void SetContrastControl(unsigned char d)
    245          {
   \                     SetContrastControl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    246          	LED_WrCmd(0x81);			// Set Contrast Control
   \   00000004   0x2081             MOVS     R0,#+129
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    247          	LED_WrCmd(d);			// Default => 0x7F
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    248          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    249          

   \                                 In section .text, align 2, keep-with-next
    250          void Set_Charge_Pump(unsigned char d)
    251          {
   \                     Set_Charge_Pump: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    252          	LED_WrCmd(0x8D);			// Set Charge Pump
   \   00000004   0x208D             MOVS     R0,#+141
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    253          	LED_WrCmd(0x10|d);		// Default => 0x10
   \   0000000A   0xF054 0x0010      ORRS     R0,R4,#0x10
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       LED_WrCmd
    254          							// 0x10 (0x00) => Disable Charge Pump
    255          							// 0x14 (0x04) => Enable Charge Pump
    256          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void Set_Segment_Remap(unsigned char d)
    259          {
   \                     Set_Segment_Remap: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    260          	LED_WrCmd(0xA0|d);		// Set Segment Re-Map
   \   00000002   0xF050 0x00A0      ORRS     R0,R0,#0xA0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    261          							// Default => 0xA0
    262          							// 0xA0 (0x00) => Column Address 0 Mapped to SEG0
    263          							// 0xA1 (0x01) => Column Address 0 Mapped to SEG127
    264          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    265          

   \                                 In section .text, align 2, keep-with-next
    266          void Set_Entire_Display(unsigned char d)
    267          {
   \                     Set_Entire_Display: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    268          	LED_WrCmd(0xA4|d);		// Set Entire Display On / Off
   \   00000002   0xF050 0x00A4      ORRS     R0,R0,#0xA4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    269          							// Default => 0xA4
    270          							// 0xA4 (0x00) => Normal Display
    271          							// 0xA5 (0x01) => Entire Display On
    272          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    273          

   \                                 In section .text, align 2, keep-with-next
    274          void Set_Inverse_Display(unsigned char d)
    275          {
   \                     Set_Inverse_Display: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    276          	LED_WrCmd(0xA6|d);		// Set Inverse Display On/Off
   \   00000002   0xF050 0x00A6      ORRS     R0,R0,#0xA6
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    277          							// Default => 0xA6
    278          							// 0xA6 (0x00) => Normal Display
    279          							// 0xA7 (0x01) => Inverse Display On
    280          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void Set_Multiplex_Ratio(unsigned char d)
    283          {
   \                     Set_Multiplex_Ratio: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    284          	LED_WrCmd(0xA8);			// Set Multiplex Ratio
   \   00000004   0x20A8             MOVS     R0,#+168
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    285          	LED_WrCmd(d);			// Default => 0x3F (1/64 Duty)
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    286          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    287          

   \                                 In section .text, align 2, keep-with-next
    288          void Set_Display_On_Off(unsigned char d)
    289          {
   \                     Set_Display_On_Off: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    290          	LED_WrCmd(0xAE|d);		// Set Display On/Off
   \   00000002   0xF050 0x00AE      ORRS     R0,R0,#0xAE
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    291          							// Default => 0xAE
    292          							// 0xAE (0x00) => Display Off
    293          							// 0xAF (0x01) => Display On
    294          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    295          

   \                                 In section .text, align 2, keep-with-next
    296          void SetStartPage(unsigned char d)
    297          {
   \                     SetStartPage: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    298          	LED_WrCmd(0xB0|d);		// Set Page Start Address for Page Addressing Mode
   \   00000002   0xF050 0x00B0      ORRS     R0,R0,#0xB0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    299          							// Default => 0xB0 (0x00)
    300          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    301          

   \                                 In section .text, align 2, keep-with-next
    302          void Set_Common_Remap(unsigned char d)
    303          {
   \                     Set_Common_Remap: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    304          	LED_WrCmd(0xC0|d);		// Set COM Output Scan Direction
   \   00000002   0xF050 0x00C0      ORRS     R0,R0,#0xC0
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       LED_WrCmd
    305          							// Default => 0xC0
    306          							// 0xC0 (0x00) => Scan from COM0 to 63
    307          							// 0xC8 (0x08) => Scan from COM63 to 0
    308          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    309          

   \                                 In section .text, align 2, keep-with-next
    310          void Set_Display_Offset(unsigned char d)
    311          {
   \                     Set_Display_Offset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    312          	LED_WrCmd(0xD3);			// Set Display Offset
   \   00000004   0x20D3             MOVS     R0,#+211
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    313          	LED_WrCmd(d);			// Default => 0x00
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    314          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    315          

   \                                 In section .text, align 2, keep-with-next
    316          void Set_Display_Clock(unsigned char d)
    317          {
   \                     Set_Display_Clock: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    318          	LED_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
   \   00000004   0x20D5             MOVS     R0,#+213
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    319          	LED_WrCmd(d);			// Default => 0x80
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    320          							// D[3:0] => Display Clock Divider
    321          							// D[7:4] => Oscillator Frequency
    322          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    323          

   \                                 In section .text, align 2, keep-with-next
    324          void Set_Precharge_Period(unsigned char d)
    325          {
   \                     Set_Precharge_Period: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    326          	LED_WrCmd(0xD9);			// Set Pre-Charge Period
   \   00000004   0x20D9             MOVS     R0,#+217
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    327          	LED_WrCmd(d);			// Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    328          							// D[3:0] => Phase 1 Period in 1~15 Display Clocks
    329          							// D[7:4] => Phase 2 Period in 1~15 Display Clocks
    330          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    331          

   \                                 In section .text, align 2, keep-with-next
    332          void Set_Common_Config(unsigned char d)
    333          {
   \                     Set_Common_Config: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    334          	LED_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
   \   00000004   0x20DA             MOVS     R0,#+218
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    335          	LED_WrCmd(0x02|d);		// Default => 0x12 (0x10)
   \   0000000A   0xF054 0x0002      ORRS     R0,R4,#0x2
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       LED_WrCmd
    336          							// Alternative COM Pin Configuration
    337          							// Disable COM Left/Right Re-Map
    338          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    339          

   \                                 In section .text, align 2, keep-with-next
    340          void Set_VCOMH(unsigned char d)
    341          {
   \                     Set_VCOMH: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    342          	LED_WrCmd(0xDB);			// Set VCOMH Deselect Level
   \   00000004   0x20DB             MOVS     R0,#+219
   \   00000006   0x.... 0x....      BL       LED_WrCmd
    343          	LED_WrCmd(d);			// Default => 0x20 (0.77*VCC)
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LED_WrCmd
    344          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    345          

   \                                 In section .text, align 2, keep-with-next
    346          void Set_NOP(void)
    347          {
   \                     Set_NOP: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    348          	LED_WrCmd(0xE3);			// Command for No Operation
   \   00000002   0x20E3             MOVS     R0,#+227
   \   00000004   0x.... 0x....      BL       LED_WrCmd
    349          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    350          

   \                                 In section .text, align 2, keep-with-next
    351          void LED_Init(void)        
    352          {       
   \                     LED_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    353                // led_gpio_int();
    354                 LED_DLY_ms(50);
   \   00000002   0x2032             MOVS     R0,#+50
   \   00000004   0x.... 0x....      BL       LED_DLY_ms
    355                  LED_DC(0);		
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2113             MOVS     R1,#+19
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000010   0x.... 0x....      BL       LPLD_GPIO_Output_b
    356          	LED_SDA(0);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2111             MOVS     R1,#+17
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   0000001C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    357                  LED_SCLK(0);		
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2110             MOVS     R1,#+16
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000028   0x.... 0x....      BL       LPLD_GPIO_Output_b
    358          	LED_RST(0);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x2112             MOVS     R1,#+18
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000034   0x.... 0x....      BL       LPLD_GPIO_Output_b
    359                  LED_DLY_ms(50);
   \   00000038   0x2032             MOVS     R0,#+50
   \   0000003A   0x.... 0x....      BL       LED_DLY_ms
    360          	LED_SCLK(1);		
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x2110             MOVS     R1,#+16
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000046   0x.... 0x....      BL       LPLD_GPIO_Output_b
    361          	LED_RST(0);
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2112             MOVS     R1,#+18
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000052   0x.... 0x....      BL       LPLD_GPIO_Output_b
    362          //	for(i=0;i<100;i++)asm("nop");     //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕	
    363                  LED_DLY_ms(50);
   \   00000056   0x2032             MOVS     R0,#+50
   \   00000058   0x.... 0x....      BL       LED_DLY_ms
    364          	LED_RST(1);
   \   0000005C   0x2201             MOVS     R2,#+1
   \   0000005E   0x2112             MOVS     R1,#+18
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400ff080
   \   00000064   0x.... 0x....      BL       LPLD_GPIO_Output_b
    365          
    366          	Set_Display_On_Off(0x00);		  // Display Off (0x00/0x01)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       Set_Display_On_Off
    367          	Set_Display_Clock(0x80);		  // Set Clock as 100 Frames/Sec
   \   0000006E   0x2080             MOVS     R0,#+128
   \   00000070   0x.... 0x....      BL       Set_Display_Clock
    368          	Set_Multiplex_Ratio(0x3F);	  // 1/64 Duty (0x0F~0x3F)
   \   00000074   0x203F             MOVS     R0,#+63
   \   00000076   0x.... 0x....      BL       Set_Multiplex_Ratio
    369          	Set_Display_Offset(0x00);		  // Shift Mapping RAM Counter (0x00~0x3F)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       Set_Display_Offset
    370          	SetStartLine(0x00);			  // Set Mapping RAM Display Start Line (0x00~0x3F)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      BL       SetStartLine
    371          	Set_Charge_Pump(0x04);		  // Enable Embedded DC/DC Converter (0x00/0x04)
   \   00000086   0x2004             MOVS     R0,#+4
   \   00000088   0x.... 0x....      BL       Set_Charge_Pump
    372          	SetAddressingMode(0x02);	  // Set Page Addressing Mode (0x00/0x01/0x02)
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       SetAddressingMode
    373          	Set_Segment_Remap(0x01);	  // Set SEG/Column Mapping     0x00左右反置 0x01正常
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x.... 0x....      BL       Set_Segment_Remap
    374          	Set_Common_Remap(0x08);	  // Set COM/Row Scan Direction 0x00上下反置 0x08正常
   \   00000098   0x2008             MOVS     R0,#+8
   \   0000009A   0x.... 0x....      BL       Set_Common_Remap
    375          	Set_Common_Config(0x10);	  // Set Sequential Configuration (0x00/0x10)
   \   0000009E   0x2010             MOVS     R0,#+16
   \   000000A0   0x.... 0x....      BL       Set_Common_Config
    376          	SetContrastControl(0xCF); // Set SEG Output Current
   \   000000A4   0x20CF             MOVS     R0,#+207
   \   000000A6   0x.... 0x....      BL       SetContrastControl
    377          	Set_Precharge_Period(0xF1);	  // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   000000AA   0x20F1             MOVS     R0,#+241
   \   000000AC   0x.... 0x....      BL       Set_Precharge_Period
    378          	Set_VCOMH(0x40);			  // Set VCOM Deselect Level
   \   000000B0   0x2040             MOVS     R0,#+64
   \   000000B2   0x.... 0x....      BL       Set_VCOMH
    379          	Set_Entire_Display(0x00);		  // Disable Entire Display On (0x00/0x01)
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      BL       Set_Entire_Display
    380          	Set_Inverse_Display(0x00);	  // Disable Inverse Display On (0x00/0x01)  
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      BL       Set_Inverse_Display
    381          	Set_Display_On_Off(0x01);		  // Display On (0x00/0x01)
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0x.... 0x....      BL       Set_Display_On_Off
    382          	LED_Fill(0x00);                               //初始清屏
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      BL       LED_Fill
    383          	LED_Set_Pos(0,0); 	
   \   000000CE   0x2100             MOVS     R1,#+0
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      BL       LED_Set_Pos
    384          } 
   \   000000D6   0xBD01             POP      {R0,PC}          ;; return
    385          //显示一个6x8标准ASCII字符

   \                                 In section .text, align 2, keep-with-next
    386          void LED_P6x8Char(unsigned char x,unsigned char y,unsigned char ch)
    387          {
   \                     LED_P6x8Char: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    388          	 unsigned char c=0,i=0;     
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
    389          	   
    390          	c =ch-32;
   \   00000006   0xF1B2 0x0420      SUBS     R4,R2,#+32
    391          	if(x>122)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x287B             CMP      R0,#+123
   \   0000000E   0xDB01             BLT.N    ??LED_P6x8Char_0
    392          	{
    393          		x=0;
   \   00000010   0x2000             MOVS     R0,#+0
    394          		y++;
   \   00000012   0x1C49             ADDS     R1,R1,#+1
    395          	}
    396          	LED_Set_Pos(x,y);    
   \                     ??LED_P6x8Char_0: (+1)
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LED_Set_Pos
    397          	for(i=0;i<6;i++)
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0xE00A             B.N      ??LED_P6x8Char_1
    398          	{     
    399          		LED_WrDat(F6x8[c][i]);  
   \                     ??LED_P6x8Char_2: (+1)
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2106             MOVS     R1,#+6
   \   00000028   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x5C28             LDRB     R0,[R5, R0]
   \   00000030   0x.... 0x....      BL       LED_WrDat
    400          	}
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LED_P6x8Char_1: (+1)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x2D06             CMP      R5,#+6
   \   0000003A   0xDBF1             BLT.N    ??LED_P6x8Char_2
    401          }
   \   0000003C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    402          
    403          //功能描述：写入一组6x8标准ASCII字符串 

   \                                 In section .text, align 2, keep-with-next
    404          void LED_P6x8Str(unsigned char x,unsigned char y,unsigned char ch[])
    405          {
   \                     LED_P6x8Str: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    406          	unsigned char c=0,i=0,j=0;      
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   \   00000012   0x2700             MOVS     R7,#+0
   \   00000014   0xE015             B.N      ??LED_P6x8Str_0
    407          	while (ch[j]!='\0')
    408          	{    
    409          		c =ch[j]-32;
    410          		if(x>126)
    411          		{
    412          			x=0;
    413          			y++;
    414          		}
    415          		LED_Set_Pos(x,y);    
    416          		for(i=0;i<6;i++)
    417          		{     
    418          			LED_WrDat(F6x8[c][i]);  
   \                     ??LED_P6x8Str_1: (+1)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000001A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000001E   0x2106             MOVS     R1,#+6
   \   00000020   0xFB01 0x0008      MLA      R0,R1,R8,R0
   \   00000024   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000028   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   0000002C   0x.... 0x....      BL       LED_WrDat
    419          		}
   \   00000030   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LED_P6x8Str_2: (+1)
   \   00000034   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000038   0xF1B9 0x0F06      CMP      R9,#+6
   \   0000003C   0xDBEB             BLT.N    ??LED_P6x8Str_1
    420          		x+=6;
   \   0000003E   0x1DA4             ADDS     R4,R4,#+6
    421          		j++;
   \   00000040   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LED_P6x8Str_0: (+1)
   \   00000042   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000044   0x5DB8             LDRB     R0,[R7, R6]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD011             BEQ.N    ??LED_P6x8Str_3
   \   0000004A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004C   0x5DB8             LDRB     R0,[R7, R6]
   \   0000004E   0xF1B0 0x0820      SUBS     R8,R0,#+32
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2C7F             CMP      R4,#+127
   \   00000056   0xDB01             BLT.N    ??LED_P6x8Str_4
   \   00000058   0x2400             MOVS     R4,#+0
   \   0000005A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LED_P6x8Str_4: (+1)
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       LED_Set_Pos
   \   00000068   0xF05F 0x0900      MOVS     R9,#+0
   \   0000006C   0xE7E2             B.N      ??LED_P6x8Str_2
    422          	}
    423          }
   \                     ??LED_P6x8Str_3: (+1)
   \   0000006E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    424          //将一个char型数转换成3位数进行显示

   \                                 In section .text, align 2, keep-with-next
    425          void LED_PrintValueC(unsigned char x, unsigned char y, char data)
    426          {
   \                     LED_PrintValueC: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    427          	unsigned char i,j,k;
    428          	if(data<=0)
   \   00000008   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000000A   0x2E00             CMP      R6,#+0
   \   0000000C   0xD109             BNE.N    ??LED_PrintValueC_0
    429          	{
    430          		LED_P6x8Char(x,y,'-');
   \   0000000E   0x222D             MOVS     R2,#+45
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LED_P6x8Char
    431          		data = - data;	
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0x4276             RSBS     R6,R6,#+0
   \   00000020   0xE006             B.N      ??LED_PrintValueC_1
    432          	}
    433          	else
    434          	{
    435          		LED_P6x8Char(x,y,'+');
   \                     ??LED_PrintValueC_0: (+1)
   \   00000022   0x222B             MOVS     R2,#+43
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       LED_P6x8Char
    436          	}
    437          	i = data/100;
   \                     ??LED_PrintValueC_1: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2064             MOVS     R0,#+100
   \   00000034   0xFB96 0xF0F0      SDIV     R0,R6,R0
    438          	j = (data%100)/10;
   \   00000038   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0x2164             MOVS     R1,#+100
   \   0000003C   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000040   0xFB01 0x6112      MLS      R1,R1,R2,R6
   \   00000044   0x220A             MOVS     R2,#+10
   \   00000046   0xFB91 0xF7F2      SDIV     R7,R1,R2
    439          	k = data%10;
   \   0000004A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004C   0x210A             MOVS     R1,#+10
   \   0000004E   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000052   0xFB01 0x6612      MLS      R6,R1,R2,R6
    440          	LED_P6x8Char(x+6,y,i+48);
   \   00000056   0xF110 0x0230      ADDS     R2,R0,#+48
   \   0000005A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000060   0x1DA0             ADDS     R0,R4,#+6
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       LED_P6x8Char
    441          	LED_P6x8Char(x+12,y,j+48);
   \   00000068   0xF117 0x0230      ADDS     R2,R7,#+48
   \   0000006C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      BL       LED_P6x8Char
    442          	LED_P6x8Char(x+18,y,k+48);		
   \   0000007C   0xF116 0x0230      ADDS     R2,R6,#+48
   \   00000080   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000082   0x0029             MOVS     R1,R5
   \   00000084   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000086   0xF114 0x0012      ADDS     R0,R4,#+18
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0x.... 0x....      BL       LED_P6x8Char
    443          }
   \   00000090   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    444          //功能描述：将一个int型数转换成5位数进行显示

   \                                 In section .text, align 2, keep-with-next
    445          void LED_PrintValueI(unsigned char x, unsigned char y, int data)
    446          {
   \                     LED_PrintValueI: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    447          	unsigned char i,j,k,l,m;  
    448          	if(data < 0)
   \   0000000A   0x2E00             CMP      R6,#+0
   \   0000000C   0xD508             BPL.N    ??LED_PrintValueI_0
    449          	{
    450          		LED_P6x8Char(x,y,'-');
   \   0000000E   0x222D             MOVS     R2,#+45
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LED_P6x8Char
    451          		data = - data;	
   \   0000001C   0x4276             RSBS     R6,R6,#+0
   \   0000001E   0xE006             B.N      ??LED_PrintValueI_1
    452          	}
    453          	else
    454          	{
    455          		LED_P6x8Char(x,y,'+');
   \                     ??LED_PrintValueI_0: (+1)
   \   00000020   0x222B             MOVS     R2,#+43
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LED_P6x8Char
    456          	}
    457          	
    458          	l  = data/10000;
   \                     ??LED_PrintValueI_1: (+1)
   \   0000002E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000032   0xFB96 0xF0F0      SDIV     R0,R6,R0
    459          	m= (data%10000)/1000;
   \   00000036   0xF242 0x7110      MOVW     R1,#+10000
   \   0000003A   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   0000003E   0xFB01 0x6112      MLS      R1,R1,R2,R6
   \   00000042   0xF44F 0x727A      MOV      R2,#+1000
   \   00000046   0xFB91 0xF7F2      SDIV     R7,R1,R2
    460          	i = (data%1000)/100;
   \   0000004A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000004E   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000052   0xFB01 0x6112      MLS      R1,R1,R2,R6
   \   00000056   0x2264             MOVS     R2,#+100
   \   00000058   0xFB91 0xF8F2      SDIV     R8,R1,R2
    461          	j = (data%100)/10;
   \   0000005C   0x2164             MOVS     R1,#+100
   \   0000005E   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000062   0xFB01 0x6112      MLS      R1,R1,R2,R6
   \   00000066   0x220A             MOVS     R2,#+10
   \   00000068   0xFB91 0xF9F2      SDIV     R9,R1,R2
    462          	k = data%10;
   \   0000006C   0x210A             MOVS     R1,#+10
   \   0000006E   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \   00000072   0xFB01 0x6612      MLS      R6,R1,R2,R6
    463          	LED_P6x8Char(x+6,y,l+48);
   \   00000076   0xF110 0x0230      ADDS     R2,R0,#+48
   \   0000007A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000007C   0x0029             MOVS     R1,R5
   \   0000007E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000080   0x1DA0             ADDS     R0,R4,#+6
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0x.... 0x....      BL       LED_P6x8Char
    464          	LED_P6x8Char(x+12,y,m+48);
   \   00000088   0xF117 0x0230      ADDS     R2,R7,#+48
   \   0000008C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008E   0x0029             MOVS     R1,R5
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x.... 0x....      BL       LED_P6x8Char
    465          	LED_P6x8Char(x+18,y,i+48);
   \   0000009C   0xF118 0x0230      ADDS     R2,R8,#+48
   \   000000A0   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A2   0x0029             MOVS     R1,R5
   \   000000A4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A6   0xF114 0x0012      ADDS     R0,R4,#+18
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x.... 0x....      BL       LED_P6x8Char
    466          	LED_P6x8Char(x+24,y,j+48);
   \   000000B0   0xF119 0x0230      ADDS     R2,R9,#+48
   \   000000B4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B6   0x0029             MOVS     R1,R5
   \   000000B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BA   0xF114 0x0018      ADDS     R0,R4,#+24
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0x.... 0x....      BL       LED_P6x8Char
    467          	LED_P6x8Char(x+30,y,k+48);		
   \   000000C4   0xF116 0x0230      ADDS     R2,R6,#+48
   \   000000C8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000CA   0x0029             MOVS     R1,R5
   \   000000CC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CE   0xF114 0x001E      ADDS     R0,R4,#+30
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0x.... 0x....      BL       LED_P6x8Char
    468          }
   \   000000D8   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    469          //显示unsigned int型

   \                                 In section .text, align 2, keep-with-next
    470           void LED_PrintValueFP(unsigned char x, unsigned char y, unsigned int data, unsigned char num)
    471           {
   \                     LED_PrintValueFP: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    472           	unsigned char m,i,j,k;  	
    473           	//LED_P6x8Char(x, y, '.');
    474          	m= data/1000;
   \   00000008   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000C   0xFBB2 0xF0F0      UDIV     R0,R2,R0
    475          	i = (data%1000)/100;
   \   00000010   0xF44F 0x717A      MOV      R1,#+1000
   \   00000014   0xFBB2 0xF6F1      UDIV     R6,R2,R1
   \   00000018   0xFB01 0x2116      MLS      R1,R1,R6,R2
   \   0000001C   0x2664             MOVS     R6,#+100
   \   0000001E   0xFBB1 0xF6F6      UDIV     R6,R1,R6
    476          	j = (data%100)/10;
   \   00000022   0x2164             MOVS     R1,#+100
   \   00000024   0xFBB2 0xF7F1      UDIV     R7,R2,R1
   \   00000028   0xFB01 0x2117      MLS      R1,R1,R7,R2
   \   0000002C   0x270A             MOVS     R7,#+10
   \   0000002E   0xFBB1 0xF7F7      UDIV     R7,R1,R7
    477          	k = data%10;
   \   00000032   0x210A             MOVS     R1,#+10
   \   00000034   0xFBB2 0xFCF1      UDIV     R12,R2,R1
   \   00000038   0xFB01 0x281C      MLS      R8,R1,R12,R2
    478          	switch(num)
   \   0000003C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003E   0x2B01             CMP      R3,#+1
   \   00000040   0xD006             BEQ.N    ??LED_PrintValueFP_0
   \   00000042   0xD368             BCC.N    ??LED_PrintValueFP_1
   \   00000044   0x2B03             CMP      R3,#+3
   \   00000046   0xD021             BEQ.N    ??LED_PrintValueFP_2
   \   00000048   0xD30C             BCC.N    ??LED_PrintValueFP_3
   \   0000004A   0x2B04             CMP      R3,#+4
   \   0000004C   0xD03C             BEQ.N    ??LED_PrintValueFP_4
   \   0000004E   0xE062             B.N      ??LED_PrintValueFP_1
    479          	{
    480          		case 1:  	LED_P6x8Char(x+6,y,k+48);
   \                     ??LED_PrintValueFP_0: (+1)
   \   00000050   0xF118 0x0230      ADDS     R2,R8,#+48
   \   00000054   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005A   0x1DA0             ADDS     R0,R4,#+6
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       LED_P6x8Char
    481          				break;
   \   00000062   0xE058             B.N      ??LED_PrintValueFP_1
    482          		case 2:  	LED_P6x8Char(x+6,y,j+48);
   \                     ??LED_PrintValueFP_3: (+1)
   \   00000064   0xF117 0x0230      ADDS     R2,R7,#+48
   \   00000068   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x1DA0             ADDS     R0,R4,#+6
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x.... 0x....      BL       LED_P6x8Char
    483          				LED_P6x8Char(x+12,y,k+48);
   \   00000076   0xF118 0x0230      ADDS     R2,R8,#+48
   \   0000007A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000007C   0x0029             MOVS     R1,R5
   \   0000007E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000080   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000084   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000086   0x.... 0x....      BL       LED_P6x8Char
    484          				break;
   \   0000008A   0xE044             B.N      ??LED_PrintValueFP_1
    485          		case 3:	LED_P6x8Char(x+6,y,i+48);
   \                     ??LED_PrintValueFP_2: (+1)
   \   0000008C   0xF116 0x0230      ADDS     R2,R6,#+48
   \   00000090   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000092   0x0029             MOVS     R1,R5
   \   00000094   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000096   0x1DA0             ADDS     R0,R4,#+6
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       LED_P6x8Char
    486          				LED_P6x8Char(x+12,y,j+48);
   \   0000009E   0xF117 0x0230      ADDS     R2,R7,#+48
   \   000000A2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000A4   0x0029             MOVS     R1,R5
   \   000000A6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A8   0xF114 0x000C      ADDS     R0,R4,#+12
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x.... 0x....      BL       LED_P6x8Char
    487          				LED_P6x8Char(x+18,y,k+48);
   \   000000B2   0xF118 0x0230      ADDS     R2,R8,#+48
   \   000000B6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B8   0x0029             MOVS     R1,R5
   \   000000BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BC   0xF114 0x0012      ADDS     R0,R4,#+18
   \   000000C0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C2   0x.... 0x....      BL       LED_P6x8Char
    488          				break;
   \   000000C6   0xE026             B.N      ??LED_PrintValueFP_1
    489          		case 4: 	LED_P6x8Char(x+6,y,m+48);
   \                     ??LED_PrintValueFP_4: (+1)
   \   000000C8   0xF110 0x0230      ADDS     R2,R0,#+48
   \   000000CC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000CE   0x0029             MOVS     R1,R5
   \   000000D0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D2   0x1DA0             ADDS     R0,R4,#+6
   \   000000D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D6   0x.... 0x....      BL       LED_P6x8Char
    490          				LED_P6x8Char(x+12,y,i+48);
   \   000000DA   0xF116 0x0230      ADDS     R2,R6,#+48
   \   000000DE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000E0   0x0029             MOVS     R1,R5
   \   000000E2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E4   0xF114 0x000C      ADDS     R0,R4,#+12
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0x.... 0x....      BL       LED_P6x8Char
    491          				LED_P6x8Char(x+18,y,j+48);
   \   000000EE   0xF117 0x0230      ADDS     R2,R7,#+48
   \   000000F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F4   0x0029             MOVS     R1,R5
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0xF114 0x0012      ADDS     R0,R4,#+18
   \   000000FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FE   0x.... 0x....      BL       LED_P6x8Char
    492          				LED_P6x8Char(x+24,y,k+48);
   \   00000102   0xF118 0x0230      ADDS     R2,R8,#+48
   \   00000106   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000108   0x0029             MOVS     R1,R5
   \   0000010A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010C   0xF114 0x0018      ADDS     R0,R4,#+24
   \   00000110   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000112   0x.... 0x....      BL       LED_P6x8Char
    493          				break;	
    494          	}
    495           }
   \                     ??LED_PrintValueFP_1: (+1)
   \   00000116   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    496          //功能描述：将一个float型数转换成整数部分5位带小数和符号的数据并进行显示

   \                                 In section .text, align 2, keep-with-next
    497           void LED_PrintValueF(unsigned char x, unsigned char y, float data, unsigned char num)
    498           {
   \                     LED_PrintValueF: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x4691             MOV      R9,R2
    499           	unsigned char l,m,i,j,k;  //万千百十个
    500           	unsigned char databiti = 6; //整数位数
   \   0000000A   0x2706             MOVS     R7,#+6
    501                  unsigned int tempdataui = 0;
   \   0000000C   0x2400             MOVS     R4,#+0
    502            	int tempdataii = (int)data; //整数部分
   \   0000000E   0x4648             MOV      R0,R9
   \   00000010   0x.... 0x....      BL       __aeabi_f2iz
   \   00000014   0x0004             MOVS     R4,R0
    503           	long int tempdatalp = (long int)((data - (int)data)*10000); //取小数位后4位
   \   00000016   0x4648             MOV      R0,R9
   \   00000018   0x.... 0x....      BL       __aeabi_f2iz
   \   0000001C   0x.... 0x....      BL       __aeabi_i2f
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0x4648             MOV      R0,R9
   \   00000024   0x.... 0x....      BL       __aeabi_fsub
   \   00000028   0x....             LDR.N    R1,??DataTable7_3  ;; 0x461c4000
   \   0000002A   0x.... 0x....      BL       __aeabi_fmul
   \   0000002E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000032   0x4680             MOV      R8,R0
    504           	
    505           	//整数部分显示
    506           	if(data < 0.0000001)  LED_P6x8Char(x, y,'-'); 
   \   00000034   0x4648             MOV      R0,R9
   \   00000036   0x....             LDR.N    R1,??DataTable7_4  ;; 0x33d6bf95
   \   00000038   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000003C   0xD207             BCS.N    ??LED_PrintValueF_0
   \   0000003E   0x222D             MOVS     R2,#+45
   \   00000040   0x0031             MOVS     R1,R6
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       LED_P6x8Char
   \   0000004C   0xE006             B.N      ??LED_PrintValueF_1
    507           	else LED_P6x8Char(x, y,'+');
   \                     ??LED_PrintValueF_0: (+1)
   \   0000004E   0x222B             MOVS     R2,#+43
   \   00000050   0x0031             MOVS     R1,R6
   \   00000052   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000054   0x0028             MOVS     R0,R5
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x.... 0x....      BL       LED_P6x8Char
    508          	if(tempdataii < 0)tempdataii = - tempdataii;  //去掉整数部分负号
   \                     ??LED_PrintValueF_1: (+1)
   \   0000005C   0x2C00             CMP      R4,#+0
   \   0000005E   0xD500             BPL.N    ??LED_PrintValueF_2
   \   00000060   0x4264             RSBS     R4,R4,#+0
    509          	tempdataui = tempdataii;
    510           	l  = tempdataui/10000;
   \                     ??LED_PrintValueF_2: (+1)
   \   00000062   0xF242 0x7010      MOVW     R0,#+10000
   \   00000066   0xFBB4 0xF0F0      UDIV     R0,R4,R0
    511          	m= (tempdataui%10000)/1000;
   \   0000006A   0xF242 0x7110      MOVW     R1,#+10000
   \   0000006E   0xFBB4 0xF2F1      UDIV     R2,R4,R1
   \   00000072   0xFB01 0x4112      MLS      R1,R1,R2,R4
   \   00000076   0xF44F 0x727A      MOV      R2,#+1000
   \   0000007A   0xFBB1 0xF9F2      UDIV     R9,R1,R2
    512          	i = (tempdataui%1000)/100;
   \   0000007E   0xF44F 0x717A      MOV      R1,#+1000
   \   00000082   0xFBB4 0xF2F1      UDIV     R2,R4,R1
   \   00000086   0xFB01 0x4112      MLS      R1,R1,R2,R4
   \   0000008A   0x2264             MOVS     R2,#+100
   \   0000008C   0xFBB1 0xFAF2      UDIV     R10,R1,R2
    513          	j = (tempdataui%100)/10;
   \   00000090   0x2164             MOVS     R1,#+100
   \   00000092   0xFBB4 0xF2F1      UDIV     R2,R4,R1
   \   00000096   0xFB01 0x4112      MLS      R1,R1,R2,R4
   \   0000009A   0x220A             MOVS     R2,#+10
   \   0000009C   0xFBB1 0xFBF2      UDIV     R11,R1,R2
    514          	k = tempdataui%10;
   \   000000A0   0x210A             MOVS     R1,#+10
   \   000000A2   0xFBB4 0xF2F1      UDIV     R2,R4,R1
   \   000000A6   0xFB01 0x4412      MLS      R4,R1,R2,R4
    515           	if (l != 0)  //五位
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD031             BEQ.N    ??LED_PrintValueF_3
    516           	{
    517           		LED_P6x8Char(x+6,y,l+48);
   \   000000B0   0xF110 0x0230      ADDS     R2,R0,#+48
   \   000000B4   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B6   0x0031             MOVS     R1,R6
   \   000000B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BA   0x1DA8             ADDS     R0,R5,#+6
   \   000000BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BE   0x.... 0x....      BL       LED_P6x8Char
    518           		LED_P6x8Char(x+12,y,m+48);
   \   000000C2   0xF119 0x0230      ADDS     R2,R9,#+48
   \   000000C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000C8   0x0031             MOVS     R1,R6
   \   000000CA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CC   0xF115 0x000C      ADDS     R0,R5,#+12
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x.... 0x....      BL       LED_P6x8Char
    519          		LED_P6x8Char(x+18,y,i+48);
   \   000000D6   0xF11A 0x0230      ADDS     R2,R10,#+48
   \   000000DA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000DC   0x0031             MOVS     R1,R6
   \   000000DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E0   0xF115 0x0012      ADDS     R0,R5,#+18
   \   000000E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E6   0x.... 0x....      BL       LED_P6x8Char
    520          		LED_P6x8Char(x+24,y,j+48);
   \   000000EA   0xF11B 0x0230      ADDS     R2,R11,#+48
   \   000000EE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F0   0x0031             MOVS     R1,R6
   \   000000F2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F4   0xF115 0x0018      ADDS     R0,R5,#+24
   \   000000F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FA   0x.... 0x....      BL       LED_P6x8Char
    521          		LED_P6x8Char(x+30,y,k+48);
   \   000000FE   0xF114 0x0230      ADDS     R2,R4,#+48
   \   00000102   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000104   0x0031             MOVS     R1,R6
   \   00000106   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000108   0xF115 0x001E      ADDS     R0,R5,#+30
   \   0000010C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   0x.... 0x....      BL       LED_P6x8Char
   \   00000112   0xE075             B.N      ??LED_PrintValueF_4
    522           	}
    523           	else if(m != 0) //四位
   \                     ??LED_PrintValueF_3: (+1)
   \   00000114   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000118   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000011C   0xD028             BEQ.N    ??LED_PrintValueF_5
    524           	{
    525           		databiti = 5;
   \   0000011E   0x2705             MOVS     R7,#+5
    526           		LED_P6x8Char(x+6,y,m+48);
   \   00000120   0xF119 0x0230      ADDS     R2,R9,#+48
   \   00000124   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000126   0x0031             MOVS     R1,R6
   \   00000128   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000012A   0x1DA8             ADDS     R0,R5,#+6
   \   0000012C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012E   0x.... 0x....      BL       LED_P6x8Char
    527           		LED_P6x8Char(x+12,y,i+48);
   \   00000132   0xF11A 0x0230      ADDS     R2,R10,#+48
   \   00000136   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000138   0x0031             MOVS     R1,R6
   \   0000013A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000013C   0xF115 0x000C      ADDS     R0,R5,#+12
   \   00000140   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000142   0x.... 0x....      BL       LED_P6x8Char
    528          		LED_P6x8Char(x+18,y,j+48);
   \   00000146   0xF11B 0x0230      ADDS     R2,R11,#+48
   \   0000014A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000014C   0x0031             MOVS     R1,R6
   \   0000014E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000150   0xF115 0x0012      ADDS     R0,R5,#+18
   \   00000154   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000156   0x.... 0x....      BL       LED_P6x8Char
    529          		LED_P6x8Char(x+24,y,k+48);
   \   0000015A   0xF114 0x0230      ADDS     R2,R4,#+48
   \   0000015E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000160   0x0031             MOVS     R1,R6
   \   00000162   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000164   0xF115 0x0018      ADDS     R0,R5,#+24
   \   00000168   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016A   0x.... 0x....      BL       LED_P6x8Char
   \   0000016E   0xE047             B.N      ??LED_PrintValueF_4
    530           	}
    531            	else if(i != 0) //三位
   \                     ??LED_PrintValueF_5: (+1)
   \   00000170   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000174   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000178   0xD01E             BEQ.N    ??LED_PrintValueF_6
    532            	{
    533            		databiti = 4;
   \   0000017A   0x2704             MOVS     R7,#+4
    534            	 	LED_P6x8Char(x+6,y,i+48);
   \   0000017C   0xF11A 0x0230      ADDS     R2,R10,#+48
   \   00000180   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000182   0x0031             MOVS     R1,R6
   \   00000184   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000186   0x1DA8             ADDS     R0,R5,#+6
   \   00000188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018A   0x.... 0x....      BL       LED_P6x8Char
    535           		LED_P6x8Char(x+12,y,j+48);
   \   0000018E   0xF11B 0x0230      ADDS     R2,R11,#+48
   \   00000192   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000194   0x0031             MOVS     R1,R6
   \   00000196   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000198   0xF115 0x000C      ADDS     R0,R5,#+12
   \   0000019C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019E   0x.... 0x....      BL       LED_P6x8Char
    536          		LED_P6x8Char(x+18,y,k+48);
   \   000001A2   0xF114 0x0230      ADDS     R2,R4,#+48
   \   000001A6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001A8   0x0031             MOVS     R1,R6
   \   000001AA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001AC   0xF115 0x0012      ADDS     R0,R5,#+18
   \   000001B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001B2   0x.... 0x....      BL       LED_P6x8Char
   \   000001B6   0xE023             B.N      ??LED_PrintValueF_4
    537            	}
    538            	else if(j != 0) //两位
   \                     ??LED_PrintValueF_6: (+1)
   \   000001B8   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001BC   0xF1BB 0x0F00      CMP      R11,#+0
   \   000001C0   0xD014             BEQ.N    ??LED_PrintValueF_7
    539            	{
    540              		databiti = 3;	
   \   000001C2   0x2703             MOVS     R7,#+3
    541            		LED_P6x8Char(x+6,y,j+48);
   \   000001C4   0xF11B 0x0230      ADDS     R2,R11,#+48
   \   000001C8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001CA   0x0031             MOVS     R1,R6
   \   000001CC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001CE   0x1DA8             ADDS     R0,R5,#+6
   \   000001D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001D2   0x.... 0x....      BL       LED_P6x8Char
    542           		LED_P6x8Char(x+12,y,k+48);
   \   000001D6   0xF114 0x0230      ADDS     R2,R4,#+48
   \   000001DA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001DC   0x0031             MOVS     R1,R6
   \   000001DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E0   0xF115 0x000C      ADDS     R0,R5,#+12
   \   000001E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001E6   0x.... 0x....      BL       LED_P6x8Char
   \   000001EA   0xE009             B.N      ??LED_PrintValueF_4
    543            	}
    544          	else 	
    545          	{
    546          		databiti = 2;
   \                     ??LED_PrintValueF_7: (+1)
   \   000001EC   0x2702             MOVS     R7,#+2
    547          		LED_P6x8Char(x+6,y,k+48);
   \   000001EE   0xF114 0x0230      ADDS     R2,R4,#+48
   \   000001F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001F4   0x0031             MOVS     R1,R6
   \   000001F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001F8   0x1DA8             ADDS     R0,R5,#+6
   \   000001FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FC   0x.... 0x....      BL       LED_P6x8Char
    548          	}	
    549           	if(tempdatalp < 0)tempdatalp = - tempdatalp;	//去掉小数部分负号
   \                     ??LED_PrintValueF_4: (+1)
   \   00000200   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000204   0xD501             BPL.N    ??LED_PrintValueF_8
   \   00000206   0xF1D8 0x0800      RSBS     R8,R8,#+0
    550          	switch(num)
   \                     ??LED_PrintValueF_8: (+1)
   \   0000020A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000020E   0x2800             CMP      R0,#+0
   \   00000210   0xD006             BEQ.N    ??LED_PrintValueF_9
   \   00000212   0x2802             CMP      R0,#+2
   \   00000214   0xD017             BEQ.N    ??LED_PrintValueF_10
   \   00000216   0xD304             BCC.N    ??LED_PrintValueF_11
   \   00000218   0x2804             CMP      R0,#+4
   \   0000021A   0xD036             BEQ.N    ??LED_PrintValueF_12
   \   0000021C   0xD324             BCC.N    ??LED_PrintValueF_13
   \   0000021E   0xE042             B.N      ??LED_PrintValueF_14
    551          	{
    552          		case 0: break;
   \                     ??LED_PrintValueF_9: (+1)
   \   00000220   0xE041             B.N      ??LED_PrintValueF_14
    553          		case 1:  LED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp / 1000),num);break;
   \                     ??LED_PrintValueF_11: (+1)
   \   00000222   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   00000226   0xF44F 0x707A      MOV      R0,#+1000
   \   0000022A   0xFB98 0xF2F0      SDIV     R2,R8,R0
   \   0000022E   0x0031             MOVS     R1,R6
   \   00000230   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000232   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000234   0x2006             MOVS     R0,#+6
   \   00000236   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000023A   0xFA50 0xF085      UXTAB    R0,R0,R5
   \   0000023E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000240   0x.... 0x....      BL       LED_PrintValueFP
   \   00000244   0xE02F             B.N      ??LED_PrintValueF_14
    554          		case 2:  LED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp / 100),num);break;
   \                     ??LED_PrintValueF_10: (+1)
   \   00000246   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   0000024A   0x2064             MOVS     R0,#+100
   \   0000024C   0xFB98 0xF2F0      SDIV     R2,R8,R0
   \   00000250   0x0031             MOVS     R1,R6
   \   00000252   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000254   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000256   0x2006             MOVS     R0,#+6
   \   00000258   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000025C   0xFA50 0xF085      UXTAB    R0,R0,R5
   \   00000260   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000262   0x.... 0x....      BL       LED_PrintValueFP
   \   00000266   0xE01E             B.N      ??LED_PrintValueF_14
    555          		case 3:  LED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp / 10),num);break;
   \                     ??LED_PrintValueF_13: (+1)
   \   00000268   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   0000026C   0x200A             MOVS     R0,#+10
   \   0000026E   0xFB98 0xF2F0      SDIV     R2,R8,R0
   \   00000272   0x0031             MOVS     R1,R6
   \   00000274   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000276   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000278   0x2006             MOVS     R0,#+6
   \   0000027A   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000027E   0xFA50 0xF085      UXTAB    R0,R0,R5
   \   00000282   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000284   0x.... 0x....      BL       LED_PrintValueFP
   \   00000288   0xE00D             B.N      ??LED_PrintValueF_14
    556          		case 4:  LED_PrintValueFP(x + databiti * 6, y, (unsigned int)(tempdatalp),num);break;					
   \                     ??LED_PrintValueF_12: (+1)
   \   0000028A   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \   0000028E   0x4642             MOV      R2,R8
   \   00000290   0x0031             MOVS     R1,R6
   \   00000292   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000294   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000296   0x2006             MOVS     R0,#+6
   \   00000298   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000029C   0xFA50 0xF085      UXTAB    R0,R0,R5
   \   000002A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002A2   0x.... 0x....      BL       LED_PrintValueFP
    557          	}
    558           }
   \                     ??LED_PrintValueF_14: (+1)
   \   000002A6   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .text, align 2, keep-with-next
    559          void display(void)
    560          {     int16 Speed1=0;
   \                     display: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x2400             MOVS     R4,#+0
    561                int16 Speed2=0;
   \   00000004   0x2500             MOVS     R5,#+0
    562               // Speed1=ch0_pulseacc;
    563                //Speed2=ch1_pulseacc;
    564                LED_P6x8Str(12,0,"Speed1:");
   \   00000006   0x....             LDR.N    R2,??DataTable7_5
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x200C             MOVS     R0,#+12
   \   0000000C   0x.... 0x....      BL       LED_P6x8Str
    565                LED_PrintValueC(75,0,Speed1);
   \   00000010   0x0022             MOVS     R2,R4
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x204B             MOVS     R0,#+75
   \   00000018   0x.... 0x....      BL       LED_PrintValueC
    566                LED_P6x8Str(12,1,"Speed2:");
   \   0000001C   0x....             LDR.N    R2,??DataTable7_6
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x200C             MOVS     R0,#+12
   \   00000022   0x.... 0x....      BL       LED_P6x8Str
    567                LED_PrintValueI(75,1,(Speed2));
   \   00000026   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000028   0x002A             MOVS     R2,R5
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x204B             MOVS     R0,#+75
   \   0000002E   0x.... 0x....      BL       LED_PrintValueI
    568          } 
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    569          //float *par[2][6]={{&Speed_g_pre,&car_angle_kp,&car_angle_kd,&Speed_kp,&Speed_kd,&Speed_ki},{&CONTROL_ROW,&direction_P,&direction_D,&epc,&edc,&ratio}};

   \                                 In section .data, align 1
    570          char press=1;
   \                     press:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
    571          char mode=0;
   \                     mode:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    572          char mode_pre;
   \                     mode_pre:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    573          int  page=0;
   \                     page:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    574          int show_fill;
   \                     show_fill:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    575          int cursor_line;
   \                     cursor_line:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    576          float place;
   \                     place:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     ??led_Port_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x33D6BF95         DC32     0x33d6bf95

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x53 0x70          DC8 "Speed1:"
   \              0x65 0x65    
   \              0x64 0x31    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x53 0x70          DC8 "Speed2:"
   \              0x65 0x65    
   \              0x64 0x32    
   \              0x3A 0x00    
    577          //void key_delay(int ms);
    578          /*void keycontrol(void)
    579          {
    580           //模式1，参数调整 
    581            if(mode==1)
    582            {
    583             if(press==1)
    584             {
    585              show_fill=1;
    586              press=0;
    587              if(page==0)
    588              {
    589                LED_Fill(0x00);
    590                LED_P6x8Str(12,0,"Voltage:");
    591                LED_PrintValueF(75,0,Voltage,3);
    592                LED_P6x8Str(12,1,"Speed:");
    593                LED_PrintValueF(75,1,Speed_g_pre,0);
    594                LED_P6x8Str(12,2,"angle_p:");
    595                LED_PrintValueF(75,2,car_angle_kp,0);
    596                LED_P6x8Str(12,3,"angle_d:");
    597                LED_PrintValueF(75,3,car_angle_kd,1);
    598                LED_P6x8Str(12,4,"Speed_kp:");
    599                LED_PrintValueF(75,4,Speed_kp,1);
    600                LED_P6x8Str(12,5,"Speed_kd:");
    601                LED_PrintValueF(75,5,Speed_kd,2);
    602                LED_P6x8Str(12,6,"Speed_ki:");
    603                LED_PrintValueF(75,6,Speed_ki,4);
    604                //LED_P6x8Str(12,6,"quan:");
    605                //LED_PrintValueF(75,6,quan,2);
    606              }
    607              if(page==1)
    608              {
    609                LED_Fill(0x00);
    610                LED_P6x8Str(12,0,"Voltage:");
    611                LED_PrintValueF(75,0,Voltage,3);
    612                LED_P6x8Str(12,1,"Row:");
    613                LED_PrintValueI(75,1,CONTROL_ROW);
    614                LED_P6x8Str(12,2,"dir_P:");
    615                LED_PrintValueF(75,2,direction_P,0);
    616                LED_P6x8Str(12,3,"dir_D:");
    617                LED_PrintValueF(75,3,direction_D,3);
    618                LED_P6x8Str(12,4,"epc:");
    619                LED_PrintValueF(75,4,epc,3);
    620                LED_P6x8Str(12,5,"edc:");
    621                LED_PrintValueF(75,5,edc,3);
    622                LED_P6x8Str(12,6,"ratio:");
    623                LED_PrintValueF(75,6,ratio,2);
    624              }
    625                LED_P6x8Str(0,cursor_line,"_");
    626             }
    627              if(page==2)
    628              { 
    629                if(show_fill)
    630                { 
    631                  LED_Fill(0x00);
    632                  show_fill=0;
    633                }
    634                if(sampleover)
    635                {
    636                  disable_irq(PORTB_IRQn);
    637                  row_DMA_flag=0;
    638                  sampleover=0;
    639                  //解压图像
    640                  img_extract();
    641                  search();
    642                  Centre_Calculate();
    643                  Centre_Err_Calculate();
    644                  //清PORTB中断标志
    645                  LPLD_GPIO_ClearIntFlag(PORTB);      
    646                  enable_irq(PORTB_IRQn);
    647                }
    648               //图像显示
    649                uint8 i,j,data;
    650                int temp,cnt;
    651                for(j=0;j<ROW;j++)
    652                {  
    653                  if(line_storage_bool[j][M]) Image[j][(int)Mid_storage[j]+39]=0;
    654                  if(line_storage_bool[j][L]) Image[j][(int)line_storage[j][L]+2]=0;
    655                  if(line_storage_bool[j][R]) Image[j][(int)line_storage[j][R]-2]=0;
    656                }
    657                for(j=0;j<8;j++)
    658               { 
    659                 LED_WrCmd(0xb0+j);
    660                 LED_WrCmd(0x01);
    661                 LED_WrCmd(0x10);
    662                 for(i=0;i<80;i++)
    663                 { 
    664                   temp=0; 
    665                   for(cnt=7;cnt>=0;cnt--)
    666                   {  
    667                     temp|=Image[j*8+cnt][i]/255; 
    668                     temp=temp<<1;  
    669                   }
    670                   data=temp>>1;
    671                   LED_WrDat(data);
    672                 }
    673               }     
    674              }
    675              if(DN)
    676              {
    677                key_delay(20);
    678                if(DN)
    679                { 
    680                  press=1;
    681                  place=1;
    682                  cursor_line++; 
    683                  while(DN);
    684                }
    685              }        
    686              if(UP)
    687              {
    688                key_delay(20);
    689                if(UP)
    690                {
    691                  press=1;
    692                  place=1;
    693                  cursor_line--; 
    694                  while(UP);
    695                }     
    696              }
    697              if(cursor_line<0)
    698                cursor_line=7;
    699              if(cursor_line>7)
    700                cursor_line=0;
    701              if(cursor_line==0)
    702              {
    703               if(RT)
    704               {
    705                 key_delay(20);
    706                 if(RT)
    707                 {
    708                   press=1;
    709                   page++;
    710                   while(RT);
    711                 }
    712               } 
    713                if(LT)
    714               {
    715                 key_delay(20);
    716                 if(LT)
    717                 {
    718                   press=1;
    719                   page--;
    720                   while(LT);
    721                 }
    722               }
    723               if(page<0) page=2;
    724               if(page>2) page=0;
    725             }
    726             if(cursor_line)
    727             {
    728               if(ESC)
    729               {
    730                 key_delay(20);
    731                 if(ESC)
    732                 {
    733                   press=1;
    734                   place*=10; 
    735                   while(ESC);
    736                 }
    737               }
    738               if(OK)
    739               {
    740                 key_delay(20);
    741                 if(OK)
    742                 {
    743                   press=1;
    744                   place*=0.1; 
    745                   while(OK);
    746                 }
    747               }
    748               if(place>1000) place=1000;
    749               if(place<0.001) place=0.001;    
    750               if(RT)
    751               {
    752                 key_delay(20);
    753                 if(RT)
    754                 {
    755                   press=1;
    756                   *par[page][cursor_line-1]=*par[page][cursor_line-1]+place;
    757                   while(RT);
    758                 }
    759               }
    760               if(LT)
    761               {
    762                 key_delay(20);
    763                 if(LT)
    764                 {
    765                   press=1;
    766                   *par[page][cursor_line-1]=*par[page][cursor_line-1]-place;
    767                   while(LT);
    768                 }
    769               }
    770               
    771             }
    772            }
    773          }
    774          void key_delay(int ms)
    775          {                         
    776              int a;
    777              while(ms)
    778              {
    779                 a=1000;
    780                 while(a--);
    781                 ms--;
    782              }
    783              return;
    784          }
    785          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LED_DLY_ms
      16   LED_Fill
        16   -> LED_WrCmd
        16   -> LED_WrDat
       8   LED_Init
         8   -> LED_DLY_ms
         8   -> LED_Fill
         8   -> LED_Set_Pos
         8   -> LPLD_GPIO_Output_b
         8   -> SetAddressingMode
         8   -> SetContrastControl
         8   -> SetStartLine
         8   -> Set_Charge_Pump
         8   -> Set_Common_Config
         8   -> Set_Common_Remap
         8   -> Set_Display_Clock
         8   -> Set_Display_Offset
         8   -> Set_Display_On_Off
         8   -> Set_Entire_Display
         8   -> Set_Inverse_Display
         8   -> Set_Multiplex_Ratio
         8   -> Set_Precharge_Period
         8   -> Set_Segment_Remap
         8   -> Set_VCOMH
      16   LED_P6x8Char
        16   -> LED_Set_Pos
        16   -> LED_WrDat
      32   LED_P6x8Str
        32   -> LED_Set_Pos
        32   -> LED_WrDat
      24   LED_PrintValueC
        24   -> LED_P6x8Char
      40   LED_PrintValueF
        40   -> LED_P6x8Char
        40   -> LED_PrintValueFP
        40   -> __aeabi_f2iz
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40 __aeabi_cfcmple
      24   LED_PrintValueFP
        24   -> LED_P6x8Char
      32   LED_PrintValueI
        32   -> LED_P6x8Char
       8   LED_Set_Pos
         8   -> LED_WrCmd
      16   LED_WrCmd
        16   -> LPLD_GPIO_Output_b
      16   LED_WrDat
        16   -> LPLD_GPIO_Output_b
       8   SetAddressingMode
         8   -> LED_WrCmd
      16   SetColumnAddress
        16   -> LED_WrCmd
       8   SetContrastControl
         8   -> LED_WrCmd
      16   SetPageAddress
        16   -> LED_WrCmd
       8   SetStartColumn
         8   -> LED_WrCmd
       8   SetStartLine
         8   -> LED_WrCmd
       8   SetStartPage
         8   -> LED_WrCmd
       8   Set_Charge_Pump
         8   -> LED_WrCmd
       8   Set_Common_Config
         8   -> LED_WrCmd
       8   Set_Common_Remap
         8   -> LED_WrCmd
       8   Set_Display_Clock
         8   -> LED_WrCmd
       8   Set_Display_Offset
         8   -> LED_WrCmd
       8   Set_Display_On_Off
         8   -> LED_WrCmd
       8   Set_Entire_Display
         8   -> LED_WrCmd
       8   Set_Inverse_Display
         8   -> LED_WrCmd
       8   Set_Multiplex_Ratio
         8   -> LED_WrCmd
       8   Set_NOP
         8   -> LED_WrCmd
       8   Set_Precharge_Period
         8   -> LED_WrCmd
       8   Set_Segment_Remap
         8   -> LED_WrCmd
       8   Set_VCOMH
         8   -> LED_WrCmd
      16   display
        16   -> LED_P6x8Str
        16   -> LED_PrintValueC
        16   -> LED_PrintValueI
      24   led_gpio_int
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       8  ?_0
       8  ?_1
     552  F6x8
      24  LED_DLY_ms
      60  LED_Fill
     216  LED_Init
      62  LED_P6x8Char
     114  LED_P6x8Str
     146  LED_PrintValueC
     682  LED_PrintValueF
     282  LED_PrintValueFP
     220  LED_PrintValueI
      40  LED_Set_Pos
     102  LED_WrCmd
     102  LED_WrDat
      20  SetAddressingMode
      30  SetColumnAddress
      20  SetContrastControl
      30  SetPageAddress
      42  SetStartColumn
      14  SetStartLine
      14  SetStartPage
      22  Set_Charge_Pump
      22  Set_Common_Config
      14  Set_Common_Remap
      20  Set_Display_Clock
      20  Set_Display_Offset
      14  Set_Display_On_Off
      14  Set_Entire_Display
      14  Set_Inverse_Display
      20  Set_Multiplex_Ratio
      10  Set_NOP
      20  Set_Precharge_Period
      14  Set_Segment_Remap
      20  Set_VCOMH
       4  cursor_line
      52  display
      20  led_Port_init
      60  led_gpio_int
       1  mode
       1  mode_pre
       4  page
       4  place
       1  press
       4  show_fill

 
    38 bytes in section .bss
     1 byte  in section .data
   568 bytes in section .rodata
 2 584 bytes in section .text
 
 2 584 bytes of CODE  memory
   568 bytes of CONST memory
    39 bytes of DATA  memory

Errors: none
Warnings: none
